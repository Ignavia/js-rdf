[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/BlankNode.js",
    "memberof": null,
    "longname": "src/BlankNode.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import RDFNode from \"./RDFNode.js\";\n\n/**\n * Represents an RDF blank node.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#blank-nodes\n */\nexport default class BlankNode extends RDFNode {\n\n    /**\n     * Creates a blank node from an N-Triples string.\n     *\n     * @param {String} ntString\n     * The N-Triples string to parse.\n     *\n     * @return {BlankNode}\n     * The created blank node.\n     *\n     * @throws\n     * If the string cannot be parsed.\n     */\n    static fromNT(ntString) {\n        const regex = /^_:(.*)$/;\n\n        if (regex.test(ntString)) {\n            const [, tempName] = regex.exec(ntString);\n            return new BlankNode(tempName);\n        } else {\n            throw new Error(`Could not parse ${ntString}.`);\n        }\n    }\n\n    /**\n     * Checks if the given string is a serialized blank node in the N-Triples\n     * format.\n     *\n     * @param {string} s\n     * The string to check.\n     *\n     * @return {Boolean}\n     * The result of the test.\n     */\n    static isNTBlankNode(s) {\n        const regex = /^_:.*$/;\n        return regex.test(s);\n    }\n\n    /**\n     * @param {*} tempName\n     * A temporary identifier for this node. It must be possible to stringify\n     * it.\n     */\n    constructor(tempName) {\n        super(\"BlankNode\", tempName);\n    }\n\n    /**\n     * The temporary name of this named node.\n     */\n    get tempName(){\n        return this.nominalValue;\n    }\n\n    /**\n     * @override\n     */\n    equals(toCompare) {\n        if (toCompare instanceof RDFNode) {\n            return this.interfaceName === toCompare.interfaceName &&\n                   this.nominalValue  === toCompare.nominalValue;\n        }\n        return this.valueOf() === toCompare;\n    }\n\n    /**\n     * @override\n     */\n    valueOf() {\n        return `${this.nominalValue}`;\n    }\n\n    /**\n     * @override\n     */\n    toString() {\n        return `${this.nominalValue}`;\n    }\n\n    /**\n     * @override\n     */\n    toNT() {\n        return `_:${this.nominalValue}`;\n    }\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BlankNode",
    "memberof": "src/BlankNode.js",
    "longname": "src/BlankNode.js~BlankNode",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/BlankNode.js",
    "importStyle": "BlankNode",
    "description": "Represents an RDF blank node.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#blank-nodes"
    ],
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/RDFNode.js~RDFNode"
    ]
  },
  {
    "__docId__": 2,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromNT",
    "memberof": "src/BlankNode.js~BlankNode",
    "longname": "src/BlankNode.js~BlankNode.fromNT",
    "access": null,
    "description": "Creates a blank node from an N-Triples string.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ntString",
        "description": "The N-Triples string to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BlankNode"
      ],
      "spread": false,
      "description": "The created blank node."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "If the string cannot be parsed."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isNTBlankNode",
    "memberof": "src/BlankNode.js~BlankNode",
    "longname": "src/BlankNode.js~BlankNode.isNTBlankNode",
    "access": null,
    "description": "Checks if the given string is a serialized blank node in the N-Triples\nformat.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The string to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "The result of the test."
    },
    "generator": false
  },
  {
    "__docId__": 4,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/BlankNode.js~BlankNode",
    "longname": "src/BlankNode.js~BlankNode#constructor",
    "access": null,
    "description": "",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tempName",
        "description": "A temporary identifier for this node. It must be possible to stringify\nit."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 5,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "tempName",
    "memberof": "src/BlankNode.js~BlankNode",
    "longname": "src/BlankNode.js~BlankNode#tempName",
    "access": null,
    "description": "The temporary name of this named node.",
    "lineNumber": 60,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/BlankNode.js~BlankNode",
    "longname": "src/BlankNode.js~BlankNode#equals",
    "access": null,
    "description": "",
    "lineNumber": 67,
    "params": [
      {
        "name": "toCompare",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "valueOf",
    "memberof": "src/BlankNode.js~BlankNode",
    "longname": "src/BlankNode.js~BlankNode#valueOf",
    "access": null,
    "description": "",
    "lineNumber": 78,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/BlankNode.js~BlankNode",
    "longname": "src/BlankNode.js~BlankNode#toString",
    "access": null,
    "description": "",
    "lineNumber": 85,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toNT",
    "memberof": "src/BlankNode.js~BlankNode",
    "longname": "src/BlankNode.js~BlankNode#toNT",
    "access": null,
    "description": "",
    "lineNumber": 92,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Graph.js",
    "memberof": null,
    "longname": "src/Graph.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {EventManager, IDGenerator, GumpMap, observableExtendedMixin, tortilla} from \"@ignavia/util\";\n\nimport Literal from \"./Literal.js\";\nimport RDFNode from \"./RDFNode.js\";\nimport Triple  from \"./Triple.js\";\n\n/**\n * Provides IDs for graphs.\n *\n * @type {IDGenerator}\n * @ignore\n */\nconst idGenerator = new IDGenerator(\"g\");\n\n/**\n * Turns the given value into a primitive value using the [Symbol.toPrimitive]\n * method if it exists.\n *\n * @param {*} v\n * The value to convert.\n *\n * @return {*}\n * The resulting primitive.\n *\n * @ignore\n */\nfunction toPrimitive(v) {\n    if (v === undefined || v === null) {\n        return v;\n    } else if (typeof v[Symbol.toPrimitive] === \"function\") {\n        return v[Symbol.toPrimitive](\"number\");\n    } else if (typeof v.valueOf === \"function\") {\n        return v.valueOf();\n    } else if (typeof v.toString === \"function\") {\n        return v.toString();\n    }\n    return v;\n}\n\n/**\n * Tests if the given value is a literal.\n *\n * @param {*} v\n * The value to test.\n *\n * @return {Boolean}\n * Whether it is a literal.\n *\n * @ignore\n */\nfunction isLiteral(v) {\n    return v instanceof Literal;\n}\n\n/**\n * An RDF graph.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#graphs\n */\nexport default class Graph {\n\n    /**\n     * A helper function to turn a triple or its ID into an ID.\n     *\n     * @param {String|Triple} triple\n     * The triple or its ID.\n     *\n     * @return {String}\n     * The requested ID.\n     */\n    static toTripleId(triple) {\n        if (typeof triple === \"string\") {\n            return triple;\n        } else if (triple instanceof Triple) {\n            return triple.id;\n        }\n    }\n\n    /**\n     * A helper function to turn a node or its ID into an ID.\n     *\n     * @param {String|RDFNode} node\n     * The node or its ID.\n     *\n     * @return {String}\n     * The requested ID.\n     */\n    static toNodeId(node) {\n        if (typeof node === \"string\") {\n            return node;\n        } else if (node instanceof RDFNode) {\n            return node.id;\n        }\n    }\n\n    /**\n     * @param {Array} [initialValues=[]]\n     * An array with all triples to add initially.\n     */\n    constructor(initialValues = []) {\n\n        /**\n         * The ID of this graph.\n         *\n         * @type {String}\n         */\n        this.id = idGenerator.next();\n\n        /**\n         * Maps from subjects to isLiteral to predicates to objects to triples.\n         *\n         * @type {GumpMap}\n         * @private\n         */\n        this.splo = new GumpMap();\n\n        /**\n         * Maps from predicates to objects to subjects to triples.\n         *\n         * @type {GumpMap}\n         * @private\n         */\n        this.pos = new GumpMap();\n\n        /**\n         * Maps from objects to subjects to predicates to triples.\n         *\n         * @type {GumpMap}\n         * @private\n         */\n        this.osp = new GumpMap();\n\n        /**\n         * Maps from IDs to nodes.\n         *\n         * @type {Map}\n         * @private\n         */\n        this.nodes = new Map();\n\n        /**\n         * Maps from IDs to triples.\n         *\n         * @type {Map}\n         * @private\n         */\n        this.triples = new Map();\n\n        /**\n         * Manages events and listeners.\n         *\n         * @type {EventManager}\n         * @private\n         */\n        this.eventManager = new EventManager();\n\n        // Add initial values\n        for (let triple of initialValues) {\n            this.add(triple);\n        }\n    }\n\n    /**\n     * The number of triples in this graph.\n     *\n     * @type {Number}\n     */\n    get length() {\n        return this.splo.size;\n    }\n\n    /**\n     * Adds the given triple to this graph.\n     *\n     * @param {Triple} triple\n     * The triple to add.\n     *\n     * @return {Graph}\n     * This graph to make the method chainable.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-add-Graph-Triple-triple\n     */\n    add(triple) {\n        if (!this.hasTriple(triple)) {\n            const s = toPrimitive(triple.subject);\n            const l = isLiteral(triple.object);\n            const p = toPrimitive(triple.predicate);\n            const o = toPrimitive(triple.object);\n\n            this.splo.add([s, p, l, o], triple);\n            this.pos.add([p, o, s], triple);\n            this.osp.add([o, s, p], triple);\n\n            this.addNodeToIdMap(triple.subject);\n            this.addNodeToIdMap(triple.predicate);\n            this.addNodeToIdMap(triple.object);\n            this.triples.set(triple.id, triple);\n\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"add\",\n                data:   triple\n            }));\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds the given node to the ID-to-RDFNode-map.\n     *\n     * @param {RDFNode} node\n     * The node to add.\n     */\n    addNodeToIdMap(node) {\n        const count = (this.nodes.has(node.id) ?\n            this.nodes.get(node.id).count + 1 :\n            1\n        );\n        this.nodes.set(node.id, { count, node });\n    }\n\n    /**\n     * Imports the given graph in to this graph.\n     *\n     * @param {Graph} graph\n     * The graph to import.\n     *\n     * @return {Graph}\n     * This graph to make the method chainable.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-addAll-Graph-Graph-graph\n     */\n    addAll(graph) {\n        for (let triple of graph) {\n            this.add(triple);\n        }\n        return this;\n    }\n\n    /**\n     * Tests if the given node or an equivalent one exists in this graph.\n     *\n     * @param {RDFNode} node\n     * The node to test.\n     *\n     * @return {Boolean}\n     * Whether the node exists already.\n     */\n    hasNode(node) {\n        return !this.iterEquivalentNodes(node).isEmpty();\n    }\n\n    /**\n     * Tests if the given triple or an equivalent one exists in this graph.\n     *\n     * @param {Triple} triple\n     * The triple to test.\n     *\n     * @return {Boolean}\n     * Whether the triple exists already.\n     */\n    hasTriple(triple) {\n        return !this.iterEquivalentTriples(triple).isEmpty();\n    }\n\n    /**\n     * Returns an iterable for all matching nodes in this graph.\n     *\n     * @param {RDFNode|String} node\n     * The node to match. Its ID is enough.\n     *\n     * @return {TortillaWrapper}\n     * An iterable for all matching nodes.\n     */\n    iterEquivalentNodes(node) {\n        node = this.toNodeObj(node);\n\n        return tortilla(this.nodes.values())\n            .map(   v => v.node)\n            .filter(n => n.equals(node));\n    }\n\n    /**\n     * Yields the nodes in the graph.\n     */\n    iterNodes() {\n        return tortilla(this.nodes.values())\n            .map(v => v.node);\n    }\n\n    /**\n     * Returns an iterable for all matching triples in this graph.\n     *\n     * @param {Triple|String} triple\n     * The triple to match. Its ID is enough.\n     *\n     * @return {TortillaWrapper}\n     * An iterable for all matching triples.\n     */\n    iterEquivalentTriples(triple) {\n        triple = this.toTripleObj(triple);\n\n        const p = toPrimitive(triple.predicate);\n        const o = toPrimitive(triple.object);\n        const s = toPrimitive(triple.subject);\n\n        return tortilla(this.pos.get([p, o, s])).filter(t => t.equals(triple));\n    }\n\n    /**\n     * Looks up the RDFNode for an ID.\n     *\n     * @param {String} id\n     * The ID of the node.\n     *\n     * @return {RDFNode}\n     * The corresponding node or undefined if none is found.\n     */\n    getNodeById(id) {\n        return (this.nodes.get(id) || {}).node;\n    }\n\n    /**\n     * Looks up the triple for an ID.\n     *\n     * @param {String} id\n     * The ID of the triple.\n     *\n     * @return {RDFNode}\n     * The corresponding triple or undefined if none is found.\n     */\n    getTripleById(id) {\n        return this.triples.get(id);\n    }\n\n    /**\n     * Removes the given triple from this graph.\n     *\n     * @param {Triple|String} triple\n     * The triple to remove. Its ID is enough.\n     *\n     * @return {Graph}\n     * This graph to make the method chainable.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-remove-Graph-Triple-triple\n     */\n    remove(triple) {\n        triple = this.toTripleObj(triple);\n\n        const matching = this.iterEquivalentTriples(triple);\n\n        if (!matching.isEmpty()) {\n            for (let triple of matching) {\n                const s = toPrimitive(triple.subject);\n                const l = isLiteral(triple.object);\n                const p = toPrimitive(triple.predicate);\n                const o = toPrimitive(triple.object);\n\n                this.splo.delete([s, p, l, o], triple);\n                this.pos.delete([p, o, s], triple);\n                this.osp.delete([o, s, p], triple);\n\n                this.removeNodeFromIdMap(triple.subject);\n                this.removeNodeFromIdMap(triple.predicate);\n                this.removeNodeFromIdMap(triple.object);\n                this.triples.delete(triple.id);\n            }\n\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"remove\",\n                data:   triple\n            }));\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the given node from the ID-to-RDFNode-map.\n     *\n     * @param {RDFNode} node\n     * The node to remove.\n     *\n     * @private\n     */\n    removeNodeFromIdMap(node) {\n        const count = this.nodes.get(node.id).count - 1;\n        if (count === 0) {\n            this.nodes.delete(node.id);\n        } else {\n            this.nodes.set(node.id, { count, node });\n        }\n    }\n\n    /**\n     * This method removes all those triples in this graph which match the given\n     * arguments.\n     *\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @param {*} [conf.subject]\n     * The subject to match against.\n     *\n     * @param {*} [conf.predicate]\n     * The predicate to match against.\n     *\n     * @param {*} [conf.object]\n     * The object to match against.\n     *\n     * @return {Graph}\n     * This graph to make the method chainable.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-removeMatches-Graph-any-subject-any-predicate-any-object\n     */\n    removeMatches(conf) {\n        let matches = this.findMatches(conf);\n        for (let triple of matches) {\n            this.remove(triple);\n        }\n        return this;\n    }\n\n    /**\n     * Creates a new Graph which is a concatenation of this graph and the\n     * given one.\n     *\n     * @param {Graph} graph\n     * The other graph.\n     *\n     * @return {Graph}\n     * The resulting graph.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-merge-Graph-Graph-graph\n     */\n    merge(graph) {\n        return new Graph().addAll(this).addAll(graph);\n    }\n\n    /**\n     * This method returns a new Graph which is comprised of all those triples\n     * in this graph which match the given arguments.\n     *\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @param {*} [conf.subject]\n     * The subject to match against.\n     *\n     * @param {*} [conf.predicate]\n     * The predicate to match against.\n     *\n     * @param {*} [conf.object]\n     * The object to match against.\n     *\n     * @param {Number} [limit=0]\n     * How many matches should be returned. If it is set to 0 all matches are\n     * includes.\n     *\n     * @return {Graph}\n     * The resulting graph.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-match-Graph-any-subject-any-predicate-any-object-unsigned-long-limit\n     */\n    match(conf, limit = 0) {\n        let matches = this.findMatches(conf);\n        if (limit !== 0) {\n            matches = matches.take(limit);\n        }\n        return new Graph(matches);\n    }\n\n    /**\n     * Returns an Iterable for all matching triples.\n     *\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @param {*} [conf.subject]\n     * The subject to match against.\n     *\n     * @param {*} [conf.predicate]\n     * The predicate to match against.\n     *\n     * @param {*} [conf.object]\n     * The object to match against.\n     *\n     * @return {Iterable}\n     * An Iterable for all matching triples.\n     *\n     * @private\n     */\n    findMatches(conf) {\n        return this.lookUpCandidates(conf).filter(triple => (\n            (!conf.subject   || triple.subject.equals(conf.subject))     &&\n            (!conf.predicate || triple.predicate.equals(conf.predicate)) &&\n            (!conf.object    || triple.object.equals(conf.object))\n        ));\n    }\n\n    /**\n     * Creates an Iterable for possibly matching triples.\n     *\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @param {*} [conf.subject]\n     * The subject to match against.\n     *\n     * @param {*} [conf.predicate]\n     * The predicate to match against.\n     *\n     * @param {*} [conf.object]\n     * The object to match against.\n     *\n     * @return {Iterable}\n     * The resulting Iterable.\n     *\n     * @private\n     */\n    lookUpCandidates({subject, predicate, object} = {}) {\n        const s = toPrimitive(subject);\n        const p = toPrimitive(predicate);\n        const o = toPrimitive(object);\n\n        let candidates = [];\n        if (subject && predicate && object) {\n            if (this.pos.has([p, o, s])) {\n                candidates = this.pos.get([p, o, s]).values();\n            }\n        } else if (subject && predicate) {\n            if (this.splo.has([s, p])) {\n                candidates = this.splo.get([s, p]).values();\n            }\n        } else if (predicate && object) {\n            if (this.pos.has([p, o])) {\n                candidates = this.pos.get([p, o]).values();\n            }\n        } else if (object && subject) {\n            if (this.osp.has([o, s])) {\n                candidates = this.osp.get([o, s]).values();\n            }\n        } else if (subject) {\n            if (this.splo.has([s])) {\n                candidates = this.splo.get([s]).values();\n            }\n        } else if (predicate) {\n            if (this.pos.has([p])) {\n                candidates = this.pos.get([p]).values();\n            }\n        } else if (object) {\n            if (this.osp.has([o])) {\n                candidates = this.osp.get([o]).values();\n            }\n        } else {\n            candidates = this.splo.values();\n        }\n\n        return tortilla(candidates);\n    }\n\n    /**\n     * Yields the subjects of all triples.\n     */\n    * subjects() {\n        const visited = new Set();\n\n        for (let {subject} of this.splo.values()) {\n            const hash = `${subject.interfaceName}#${subject.nominalValue}`;\n            if (!visited.has(hash)) {\n                yield subject;\n                visited.add(hash);\n            }\n        }\n    }\n\n    /**\n     * Yields the predicates of all triples with the given subject.\n     *\n     * @param {RDFNode|String} subject\n     * The subject to match. Its ID is enough.\n     */\n    * predicates(subject) {\n        subject = this.toNodeObj(subject);\n\n        const visited = new Set();\n\n        for (let {predicate} of this.findMatches({subject})) {\n            const hash = predicate.nominalValue;\n            if (!visited.has(hash)) {\n                yield predicate;\n                visited.add(hash);\n            }\n        }\n    }\n\n    /**\n     * Yields the objects of all triples with the given subject and predicate.\n     *\n     * @param {RDFNode|String} subject\n     * The subject to match. Its ID is enough.\n     *\n     * @param {RDFNode|String} predicate\n     * The predicate to match. Its ID is enough.\n     */\n    objects(subject, predicate) {\n        subject   = this.toNodeObj(subject);\n        predicate = this.toNodeObj(predicate);\n\n        return this.findMatches({subject, predicate})\n            .map(triple => triple.object);\n    }\n\n    /**\n     * Yields the literals of all triples with the given subject and predicate.\n     *\n     * @param {RDFNode|String} subject\n     * The subject to match. Its ID is enough.\n     *\n     * @param {RDFNode|String} predicate\n     * The predicate to match. Its ID is enough.\n     */\n    literals(subject, predicate) {\n        subject   = this.toNodeObj(subject);\n        predicate = this.toNodeObj(predicate);\n\n        const s = toPrimitive(subject);\n        const p = toPrimitive(predicate);\n\n        if (!this.splo.has([s, p, true])) {\n            return tortilla([]);\n        }\n\n        return tortilla(this.splo.get([s, p, true]).values())\n            .filter(triple => triple.subject.equals(subject) &&\n                              triple.predicate.equals(predicate))\n            .map(triple => triple.object);\n    }\n\n    /**\n     * Checks if the graph includes any triples with the given subject and a\n     * literal as object.\n     *\n     * @param {RDFNode|String} subject\n     * The subject to match. Its ID is enough.\n     *\n     * @return {Boolean}\n     * The result of the test.\n     */\n    subjectHasLiterals(subject) {\n        subject = this.toNodeObj(subject);\n\n        for (let predicate of this.predicates(subject)) {\n            if (this.predicateHasLiterals(subject, predicate)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks if the graph has any triples with the given subject and predicate\n     * and a literal as object.\n     *\n     * @param {RDFNode|String} subject\n     * The subject to match. Its ID is enough.\n     *\n     * @param {RDFNode|String} predicate\n     * The predicate to match. Its ID is enough.\n     *\n     * @return {Boolean}\n     * The result of the test.\n     */\n    predicateHasLiterals(subject, predicate) {\n        subject   = this.toNodeObj(subject);\n        predicate = this.toNodeObj(predicate);\n\n        return !this.literals(subject, predicate).isEmpty();\n    }\n\n    /**\n     * Tests whether some triple in the graph passes the test.\n     *\n     * @param {Function} f\n     * The test funtion.\n     *\n     * @return {Boolean}\n     * If at least one triple passes the test.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-some-boolean-TripleFilter-callback\n     */\n    some(f) {\n        for (let triple of this) {\n            if (f(triple)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Tests whether all triple in the graph passes the test.\n     *\n     * @param {Function} f\n     * The test funtion.\n     *\n     * @return {Boolean}\n     * If all triples pass the test.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-every-boolean-TripleFilter-callback\n     */\n    every(f) {\n        for (let triple of this) {\n            if (!f(triple)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Creates a new graph with all the triples which pass the test.\n     *\n     * @param {Function} f\n     * The filter function.\n     *\n     * @return {Graph}\n     * The resulting graph.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-filter-Graph-TripleFilter-filter\n     */\n    filter(f) {\n        const result = new Graph();\n        for (let triple of this) {\n            if (f(triple)) {\n                result.add(triple);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Calls the given function on each triple in this graph. It gets the triple\n     * as its first argument and this graph as the second.\n     *\n     * @param {Function} f\n     * The callback function.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-forEach-void-TripleCallback-callback\n     */\n    forEach(f) {\n        for (let triple of this) {\n            f(triple, this);\n        }\n    }\n\n    /**\n     * Removes all triples from this graph.\n     */\n    clear() {\n        if (this.length > 0) {\n            const deleted = [...this];\n\n            this.splo.clear();\n            this.pos.clear();\n            this.osp.clear();\n\n            this.nodes.clear();\n            this.triples.clear();\n\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"clear\",\n                data:   deleted\n            }));\n        }\n    }\n\n    /**\n     * Yields the triples in this graph. Their order is arbitrary.\n     */\n    [Symbol.iterator]() {\n        return this.splo.values();\n    }\n\n    /**\n     * Returns an array of the triples within this graph. Their order is\n     * arbitrary.\n     *\n     * @return {Triple[]}\n     * An array of the triples.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Graph-toArray-sequence-Triple\n     */\n    toArray() {\n        return [...this];\n    }\n\n    /**\n     * Returns a string representation of this graph.\n     *\n     * @return {String}\n     * A string representing this graph.\n     */\n    toString() {\n        let result = \"\";\n        for (let triple of this) {\n            result += triple.toString() + \" .\\n\";\n        }\n        return result;\n    }\n\n    /**\n     * A helper function to turn a triple or its ID into a triple object.\n     *\n     * @param {String|Triple} triple\n     * The triple to get or its ID.\n     *\n     * @return {Triple}\n     * The requested triple.\n     */\n    toTripleObj(triple) {\n        if (typeof triple === \"string\") {\n            return this.getTripleById(triple);\n        } else if (triple instanceof Triple) {\n            return triple;\n        }\n    }\n\n    /**\n     * A helper function to turn a node or its ID into a node object.\n     *\n     * @param {String|RDFNode} node\n     * The node to get or its ID.\n     *\n     * @return {RDFNode}\n     * The requested node.\n     */\n    toNodeObj(node) {\n        if (typeof node === \"string\") {\n            return this.getNodeById(node);\n        } else if (node instanceof RDFNode) {\n            return node;\n        }\n    }\n}\n\n// Make graph observable\nObject.assign(Graph.prototype, observableExtendedMixin);\n"
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "idGenerator",
    "memberof": "src/Graph.js",
    "longname": "src/Graph.js~idGenerator",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/Graph.js",
    "importStyle": null,
    "description": "Provides IDs for graphs.",
    "lineNumber": 13,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "IDGenerator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 12,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "toPrimitive",
    "memberof": "src/Graph.js",
    "longname": "src/Graph.js~toPrimitive",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/Graph.js",
    "importStyle": null,
    "description": "Turns the given value into a primitive value using the [Symbol.toPrimitive]\nmethod if it exists.",
    "lineNumber": 27,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The value to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The resulting primitive."
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isLiteral",
    "memberof": "src/Graph.js",
    "longname": "src/Graph.js~isLiteral",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/Graph.js",
    "importStyle": null,
    "description": "Tests if the given value is a literal.",
    "lineNumber": 51,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether it is a literal."
    },
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Graph",
    "memberof": "src/Graph.js",
    "longname": "src/Graph.js~Graph",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/Graph.js",
    "importStyle": "Graph",
    "description": "An RDF graph.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#graphs"
    ],
    "lineNumber": 60,
    "interface": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toTripleId",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph.toTripleId",
    "access": null,
    "description": "A helper function to turn a triple or its ID into an ID.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Triple"
        ],
        "spread": false,
        "optional": false,
        "name": "triple",
        "description": "The triple or its ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The requested ID."
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toNodeId",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph.toNodeId",
    "access": null,
    "description": "A helper function to turn a node or its ID into an ID.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node or its ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The requested ID."
    },
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#constructor",
    "access": null,
    "description": "",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "initialValues",
        "description": "An array with all triples to add initially."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#id",
    "access": null,
    "description": "The ID of this graph.",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "splo",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#splo",
    "access": "private",
    "description": "Maps from subjects to isLiteral to predicates to objects to triples.",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "GumpMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pos",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#pos",
    "access": "private",
    "description": "Maps from predicates to objects to subjects to triples.",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "GumpMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "osp",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#osp",
    "access": "private",
    "description": "Maps from objects to subjects to predicates to triples.",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "GumpMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nodes",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#nodes",
    "access": "private",
    "description": "Maps from IDs to nodes.",
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "triples",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#triples",
    "access": "private",
    "description": "Maps from IDs to triples.",
    "lineNumber": 147,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "eventManager",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#eventManager",
    "access": "private",
    "description": "Manages events and listeners.",
    "lineNumber": 155,
    "type": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 25,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "length",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#length",
    "access": null,
    "description": "The number of triples in this graph.",
    "lineNumber": 168,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#add",
    "access": null,
    "description": "Adds the given triple to this graph.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-add-Graph-Triple-triple"
    ],
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "Triple"
        ],
        "spread": false,
        "optional": false,
        "name": "triple",
        "description": "The triple to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "This graph to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addNodeToIdMap",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#addNodeToIdMap",
    "access": null,
    "description": "Adds the given node to the ID-to-RDFNode-map.",
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to add."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addAll",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#addAll",
    "access": null,
    "description": "Imports the given graph in to this graph.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-addAll-Graph-Graph-graph"
    ],
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to import."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "This graph to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasNode",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#hasNode",
    "access": null,
    "description": "Tests if the given node or an equivalent one exists in this graph.",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the node exists already."
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasTriple",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#hasTriple",
    "access": null,
    "description": "Tests if the given triple or an equivalent one exists in this graph.",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "Triple"
        ],
        "spread": false,
        "optional": false,
        "name": "triple",
        "description": "The triple to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the triple exists already."
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterEquivalentNodes",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#iterEquivalentNodes",
    "access": null,
    "description": "Returns an iterable for all matching nodes in this graph.",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to match. Its ID is enough."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "An iterable for all matching nodes."
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterNodes",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#iterNodes",
    "access": null,
    "description": "Yields the nodes in the graph.",
    "lineNumber": 287,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterEquivalentTriples",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#iterEquivalentTriples",
    "access": null,
    "description": "Returns an iterable for all matching triples in this graph.",
    "lineNumber": 301,
    "params": [
      {
        "nullable": null,
        "types": [
          "Triple",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "triple",
        "description": "The triple to match. Its ID is enough."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "An iterable for all matching triples."
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNodeById",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#getNodeById",
    "access": null,
    "description": "Looks up the RDFNode for an ID.",
    "lineNumber": 320,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID of the node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": "The corresponding node or undefined if none is found."
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTripleById",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#getTripleById",
    "access": null,
    "description": "Looks up the triple for an ID.",
    "lineNumber": 333,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID of the triple."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": "The corresponding triple or undefined if none is found."
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#remove",
    "access": null,
    "description": "Removes the given triple from this graph.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-remove-Graph-Triple-triple"
    ],
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "Triple",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "triple",
        "description": "The triple to remove. Its ID is enough."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "This graph to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeNodeFromIdMap",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#removeNodeFromIdMap",
    "access": "private",
    "description": "Removes the given node from the ID-to-RDFNode-map.",
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to remove."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeMatches",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#removeMatches",
    "access": null,
    "description": "This method removes all those triples in this graph which match the given\narguments.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-removeMatches-Graph-any-subject-any-predicate-any-object"
    ],
    "lineNumber": 418,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.subject",
        "description": "The subject to match against."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.predicate",
        "description": "The predicate to match against."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.object",
        "description": "The object to match against."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "This graph to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "merge",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#merge",
    "access": null,
    "description": "Creates a new Graph which is a concatenation of this graph and the\ngiven one.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-merge-Graph-Graph-graph"
    ],
    "lineNumber": 438,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The other graph."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "The resulting graph."
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "match",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#match",
    "access": null,
    "description": "This method returns a new Graph which is comprised of all those triples\nin this graph which match the given arguments.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-match-Graph-any-subject-any-predicate-any-object-unsigned-long-limit"
    ],
    "lineNumber": 467,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.subject",
        "description": "The subject to match against."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.predicate",
        "description": "The predicate to match against."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.object",
        "description": "The object to match against."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "limit",
        "description": "How many matches should be returned. If it is set to 0 all matches are\nincludes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "The resulting graph."
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findMatches",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#findMatches",
    "access": "private",
    "description": "Returns an Iterable for all matching triples.",
    "lineNumber": 495,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.subject",
        "description": "The subject to match against."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.predicate",
        "description": "The predicate to match against."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.object",
        "description": "The object to match against."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": "An Iterable for all matching triples."
    },
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lookUpCandidates",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#lookUpCandidates",
    "access": "private",
    "description": "Creates an Iterable for possibly matching triples.",
    "lineNumber": 523,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.subject",
        "description": "The subject to match against."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.predicate",
        "description": "The predicate to match against."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.object",
        "description": "The object to match against."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": "The resulting Iterable."
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subjects",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#subjects",
    "access": null,
    "description": "Yields the subjects of all triples.",
    "lineNumber": 567,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "predicates",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#predicates",
    "access": null,
    "description": "Yields the predicates of all triples with the given subject.",
    "lineNumber": 585,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject to match. Its ID is enough."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "objects",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#objects",
    "access": null,
    "description": "Yields the objects of all triples with the given subject and predicate.",
    "lineNumber": 608,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject to match. Its ID is enough."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The predicate to match. Its ID is enough."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "literals",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#literals",
    "access": null,
    "description": "Yields the literals of all triples with the given subject and predicate.",
    "lineNumber": 625,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject to match. Its ID is enough."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The predicate to match. Its ID is enough."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subjectHasLiterals",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#subjectHasLiterals",
    "access": null,
    "description": "Checks if the graph includes any triples with the given subject and a\nliteral as object.",
    "lineNumber": 652,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject to match. Its ID is enough."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "The result of the test."
    },
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "predicateHasLiterals",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#predicateHasLiterals",
    "access": null,
    "description": "Checks if the graph has any triples with the given subject and predicate\nand a literal as object.",
    "lineNumber": 676,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject to match. Its ID is enough."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The predicate to match. Its ID is enough."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "The result of the test."
    },
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "some",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#some",
    "access": null,
    "description": "Tests whether some triple in the graph passes the test.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-some-boolean-TripleFilter-callback"
    ],
    "lineNumber": 694,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The test funtion."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If at least one triple passes the test."
    },
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "every",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#every",
    "access": null,
    "description": "Tests whether all triple in the graph passes the test.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-every-boolean-TripleFilter-callback"
    ],
    "lineNumber": 714,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The test funtion."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If all triples pass the test."
    },
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "filter",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#filter",
    "access": null,
    "description": "Creates a new graph with all the triples which pass the test.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-filter-Graph-TripleFilter-filter"
    ],
    "lineNumber": 734,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The filter function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "The resulting graph."
    },
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "forEach",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#forEach",
    "access": null,
    "description": "Calls the given function on each triple in this graph. It gets the triple\nas its first argument and this graph as the second.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-forEach-void-TripleCallback-callback"
    ],
    "lineNumber": 753,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The callback function."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#clear",
    "access": null,
    "description": "Removes all triples from this graph.",
    "lineNumber": 762,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#[Symbol.iterator]",
    "access": null,
    "description": "Yields the triples in this graph. Their order is arbitrary.",
    "lineNumber": 784,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toArray",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#toArray",
    "access": null,
    "description": "Returns an array of the triples within this graph. Their order is\narbitrary.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Graph-toArray-sequence-Triple"
    ],
    "lineNumber": 797,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Triple[]"
      ],
      "spread": false,
      "description": "An array of the triples."
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#toString",
    "access": null,
    "description": "Returns a string representation of this graph.",
    "lineNumber": 807,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representing this graph."
    },
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toTripleObj",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#toTripleObj",
    "access": null,
    "description": "A helper function to turn a triple or its ID into a triple object.",
    "lineNumber": 824,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Triple"
        ],
        "spread": false,
        "optional": false,
        "name": "triple",
        "description": "The triple to get or its ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Triple"
      ],
      "spread": false,
      "description": "The requested triple."
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toNodeObj",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#toNodeObj",
    "access": null,
    "description": "A helper function to turn a node or its ID into a node object.",
    "lineNumber": 841,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to get or its ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": "The requested node."
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Literal.js",
    "memberof": null,
    "longname": "src/Literal.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import RDFNode                 from \"./RDFNode.js\";\nimport {xmlSchemaTypes as xsd} from \"./xmlSchemaTypes.js\";\n\n/**\n * Turns the given value into a primitive value using the [Symbol.toPrimitive]\n * method if it exists.\n *\n * @param {*} v\n * The value to convert.\n *\n * @return {*}\n * The resulting primitive.\n *\n * @ignore\n */\nfunction toPrimitive(v) {\n    if (v === undefined || v === null) {\n        return v;\n    } else if (typeof v[Symbol.toPrimitive] === \"function\") {\n        return v[Symbol.toPrimitive](\"number\");\n    } else if (typeof v.valueOf === \"function\") {\n        return v.valueOf();\n    } else if (typeof v.toString === \"function\") {\n        return v.toString();\n    }\n    return v;\n}\n\n/**\n * Lists how to convert a string to a specific datatype.\n *\n * @type {object}\n * @ignore\n */\nconst converter = {\n    [xsd.string]:             String,\n    [xsd.boolean]:            (s) => s === \"true\",\n    [xsd.dateTime]:           (s) => new Date(s),\n    [xsd.date]:               (s) => new Date(s),\n    //[xsd.time]:               (s) => new Date(s),\n    [xsd.double]:             Number,\n    [xsd.float]:              Number,\n    [xsd.decimal]:            Number,\n    [xsd.positiveInteger]:    Number,\n    [xsd.nonNegativeInteger]: Number,\n    [xsd.integer]:            Number,\n    [xsd.nonPositiveInteger]: Number,\n    [xsd.negativeInteger]:    Number,\n    [xsd.long]:               Number,\n    [xsd.int]:                Number,\n    [xsd.short]:              Number,\n    [xsd.byte]:               Number,\n    [xsd.unsignedLong]:       Number,\n    [xsd.unsignedInt]:        Number,\n    [xsd.unsignedShort]:      Number,\n    [xsd.unsignedByte]:       Number\n};\n\n/**\n * The IRI of the langString datatype.\n *\n * @type {string}\n * @ignore\n */\nconst langString = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\";\n\n/**\n * Represents an RDF literal.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#literals\n */\nexport default class Literal extends RDFNode {\n\n    /**\n     * Creates a literal from an N-Triples string.\n     *\n     * @param {String} ntString\n     * The N-Triples string to parse.\n     *\n     * @return {Literal}\n     * The created literal.\n     *\n     * @throws\n     * If the string cannot be parsed.\n     */\n    static fromNT(ntString) {\n        const normalRegex   = /^\"(.*)\"$/;\n        const languageRegex = /^\"(.*)\"@(.*)$/;\n        const datatypeRegex = /^\"(.*)\"\\^\\^<(.*)>$/;\n\n        if (normalRegex.test(ntString)) {\n            const [, value] = normalRegex.exec(ntString);\n            return new Literal(value);\n        } else if (languageRegex.test(ntString)) {\n            const [, value, language] = languageRegex.exec(ntString);\n            return new Literal(value, {language});\n        } else if (datatypeRegex.test(ntString)) {\n            const [, value, datatype] = datatypeRegex.exec(ntString);\n            return new Literal(value, {datatype});\n        } else {\n            throw new Error(`Could not parse ${ntString}.`);\n        }\n    }\n\n    /**\n     * Checks if the given string is a serialized literal in the N-Triples\n     * format.\n     *\n     * @param {string} s\n     * The string to check.\n     *\n     * @return {Boolean}\n     * The result of the test.\n     */\n    static isNTLiteral(s) {\n        const regex = /^\".*\"(?:@.*|\\^\\^<.*>)?$/;\n        return regex.test(s);\n    }\n\n    /**\n     * @param {String} value\n     * The value of this literal.\n     *\n     * @param {Object} options\n     * Contains the remaining parameters.\n     *\n     * @param {String} [options.language]\n     * The language of this literal.\n     *\n     * @param {String} [options.datatype]\n     * The datatype of this literal.\n     */\n    constructor(value, {language = null, datatype = xsd.string} = {}) {\n        super(\"Literal\", value);\n\n        /**\n         * The language of this literal.\n         *\n         * @type {String}\n         */\n        this.language = language;\n\n        /**\n         * The datatype of this literal.\n         *\n         * @type {String}\n         */\n        this.datatype = language === null ? datatype : langString;\n    }\n\n    /**\n     * The value of this literal.\n     */\n    get value() {\n        return this.nominalValue;\n    }\n\n    /**\n     * @override\n     */\n    equals(toCompare) {\n        if (toCompare instanceof RDFNode) {\n            return this.interfaceName === toCompare.interfaceName &&\n                   this.nominalValue  === toCompare.nominalValue  &&\n                   this.language      === toCompare.language      &&\n                  (this.datatype      === toCompare.datatype || this.language !== null);\n        }\n        return toPrimitive(this) === toPrimitive(toCompare);\n    }\n\n    /**\n     * @override\n     */\n    valueOf() {\n        if (this.language === null && this.datatype !== null && converter[this.datatype.toString()]) {\n            return converter[this.datatype.toString()](this.nominalValue);\n        }\n        return this.nominalValue;\n    }\n\n    /**\n     * @override\n     */\n    toString() {\n        return `${this.nominalValue}`;\n    }\n\n    /**\n     * @override\n     */\n    [Symbol.toPrimitive](hint = \"default\") {\n        if (hint === \"string\") {\n            return this.toString();\n        }\n        return toPrimitive(this.valueOf());\n    }\n\n    /**\n     * @override\n     */\n    toNT() {\n        if (this.language !== null) {\n            return `\"${this.nominalValue}\"@${this.language}`;\n        } else if (this.datatype !== null) {\n            return `\"${this.nominalValue}\"^^<${this.datatype}>`;\n        } else {\n            return `\"${this.nominalValue}\"`;\n        }\n    }\n}\n"
  },
  {
    "__docId__": 60,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "toPrimitive",
    "memberof": "src/Literal.js",
    "longname": "src/Literal.js~toPrimitive",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/Literal.js",
    "importStyle": null,
    "description": "Turns the given value into a primitive value using the [Symbol.toPrimitive]\nmethod if it exists.",
    "lineNumber": 16,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The value to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The resulting primitive."
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "converter",
    "memberof": "src/Literal.js",
    "longname": "src/Literal.js~converter",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/Literal.js",
    "importStyle": null,
    "description": "Lists how to convert a string to a specific datatype.",
    "lineNumber": 35,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "langString",
    "memberof": "src/Literal.js",
    "longname": "src/Literal.js~langString",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/Literal.js",
    "importStyle": null,
    "description": "The IRI of the langString datatype.",
    "lineNumber": 65,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Literal",
    "memberof": "src/Literal.js",
    "longname": "src/Literal.js~Literal",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/Literal.js",
    "importStyle": "Literal",
    "description": "Represents an RDF literal.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#literals"
    ],
    "lineNumber": 72,
    "interface": false,
    "extends": [
      "src/RDFNode.js~RDFNode"
    ]
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromNT",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal.fromNT",
    "access": null,
    "description": "Creates a literal from an N-Triples string.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ntString",
        "description": "The N-Triples string to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Literal"
      ],
      "spread": false,
      "description": "The created literal."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "If the string cannot be parsed."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isNTLiteral",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal.isNTLiteral",
    "access": null,
    "description": "Checks if the given string is a serialized literal in the N-Triples\nformat.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The string to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "The result of the test."
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal#constructor",
    "access": null,
    "description": "",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value of this literal."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Contains the remaining parameters."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.language",
        "description": "The language of this literal."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.datatype",
        "description": "The datatype of this literal."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "language",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal#language",
    "access": null,
    "description": "The language of this literal.",
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "datatype",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal#datatype",
    "access": null,
    "description": "The datatype of this literal.",
    "lineNumber": 148,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal#value",
    "access": null,
    "description": "The value of this literal.",
    "lineNumber": 154,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal#equals",
    "access": null,
    "description": "",
    "lineNumber": 161,
    "params": [
      {
        "name": "toCompare",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "valueOf",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal#valueOf",
    "access": null,
    "description": "",
    "lineNumber": 174,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal#toString",
    "access": null,
    "description": "",
    "lineNumber": 184,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.toPrimitive]",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal#[Symbol.toPrimitive]",
    "access": null,
    "description": "",
    "lineNumber": 191,
    "params": [
      {
        "name": "hint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "default",
        "defaultValue": "default"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toNT",
    "memberof": "src/Literal.js~Literal",
    "longname": "src/Literal.js~Literal#toNT",
    "access": null,
    "description": "",
    "lineNumber": 201,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/NamedNode.js",
    "memberof": null,
    "longname": "src/NamedNode.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import RDFNode from \"./RDFNode.js\";\n\n/**\n * Represents an RDF named node.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#named-nodes\n */\nexport default class NamedNode extends RDFNode {\n\n    /**\n     * Creates a named node from an N-Triples string.\n     *\n     * @param {String} ntString\n     * The N-Triples string to parse.\n     *\n     * @return {NamedNode}\n     * The created named node.\n     *\n     * @throws\n     * If the string cannot be parsed.\n     */\n    static fromNT(ntString) {\n        const regex = /^<(.*)>$/;\n\n        if (regex.test(ntString)) {\n            const [, iri] = regex.exec(ntString);\n            return new NamedNode(iri);\n        } else {\n            throw new Error(`Could not parse ${ntString}.`);\n        }\n    }\n\n    /**\n     * Checks if the given string is a serialized named node in the N-Triples\n     * format.\n     *\n     * @param {string} s\n     * The string to check.\n     *\n     * @return {Boolean}\n     * The result of the test.\n     */\n    static isNTNamedNode(s) {\n        const regex = /^<.*>$/;\n        return regex.test(s);\n    }\n\n    /**\n     * @param {String} iri\n     * The IRI identifier of this node.\n     */\n    constructor(iri) {\n        super(\"NamedNode\", iri);\n    }\n\n    /**\n     * The IRI of this named node.\n     */\n    get iri() {\n        return this.nominalValue;\n    }\n\n    /**\n     * @override\n     */\n    equals(toCompare) {\n        if (toCompare instanceof RDFNode) {\n            return this.interfaceName === toCompare.interfaceName &&\n                   this.nominalValue  === toCompare.nominalValue;\n        }\n        return this.valueOf() === toCompare;\n    }\n\n    /**\n     * @override\n     */\n    valueOf() {\n        return `${this.nominalValue}`;\n    }\n\n    /**\n     * @override\n     */\n    toString() {\n        return `${this.nominalValue}`;\n    }\n\n    /**\n     * @override\n     */\n    toNT() {\n        return `<${this.nominalValue}>`;\n    }\n}\n"
  },
  {
    "__docId__": 76,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "NamedNode",
    "memberof": "src/NamedNode.js",
    "longname": "src/NamedNode.js~NamedNode",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/NamedNode.js",
    "importStyle": "NamedNode",
    "description": "Represents an RDF named node.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#named-nodes"
    ],
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/RDFNode.js~RDFNode"
    ]
  },
  {
    "__docId__": 77,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromNT",
    "memberof": "src/NamedNode.js~NamedNode",
    "longname": "src/NamedNode.js~NamedNode.fromNT",
    "access": null,
    "description": "Creates a named node from an N-Triples string.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ntString",
        "description": "The N-Triples string to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NamedNode"
      ],
      "spread": false,
      "description": "The created named node."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "If the string cannot be parsed."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isNTNamedNode",
    "memberof": "src/NamedNode.js~NamedNode",
    "longname": "src/NamedNode.js~NamedNode.isNTNamedNode",
    "access": null,
    "description": "Checks if the given string is a serialized named node in the N-Triples\nformat.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The string to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "The result of the test."
    },
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/NamedNode.js~NamedNode",
    "longname": "src/NamedNode.js~NamedNode#constructor",
    "access": null,
    "description": "",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI identifier of this node."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "iri",
    "memberof": "src/NamedNode.js~NamedNode",
    "longname": "src/NamedNode.js~NamedNode#iri",
    "access": null,
    "description": "The IRI of this named node.",
    "lineNumber": 59,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/NamedNode.js~NamedNode",
    "longname": "src/NamedNode.js~NamedNode#equals",
    "access": null,
    "description": "",
    "lineNumber": 66,
    "params": [
      {
        "name": "toCompare",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "valueOf",
    "memberof": "src/NamedNode.js~NamedNode",
    "longname": "src/NamedNode.js~NamedNode#valueOf",
    "access": null,
    "description": "",
    "lineNumber": 77,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/NamedNode.js~NamedNode",
    "longname": "src/NamedNode.js~NamedNode#toString",
    "access": null,
    "description": "",
    "lineNumber": 84,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toNT",
    "memberof": "src/NamedNode.js~NamedNode",
    "longname": "src/NamedNode.js~NamedNode#toNT",
    "access": null,
    "description": "",
    "lineNumber": 91,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/PrefixMap.js",
    "memberof": null,
    "longname": "src/PrefixMap.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Tolkien1To1Map} from \"@ignavia/util\";\n\n/**\n * Maps from prefixes to IRIs and back.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#prefix-maps\n */\nexport default class PrefixMap {\n\n    /**\n     * @param {Array} [initialValue=[]]\n     * An array with [term, iri] entries.\n     */\n    constructor(initialValues = []) {\n\n        /**\n         * Maps from prefixes to IRIs and back.\n         *\n         * @type {Tolkien1To1Map}\n         * @private\n         */\n        this.prefixToNamespace = new Tolkien1To1Map();\n\n        // Add initial values\n        for (let [prefix, ns] of initialValues) {\n            this.set(prefix, ns);\n        }\n    }\n\n    /**\n     * The number of entries in this PrefixMap.\n     *\n     * @type {Number}\n     */\n    get size() {\n        return this.prefixToNamespace.size;\n    }\n\n    /**\n     * Connects the given prefix and namespace.\n     *\n     * @param {String} prefix\n     * The prefix to use.\n     *\n     * @param {String} ns\n     * The namespace to use.\n     *\n     * @return {TermMap}\n     * The TermMap to make the object chainable.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-set-omittable-setter-void-DOMString-prefix-DOMString-iri\n     */\n    set(prefix, ns) {\n        this.prefixToNamespace.add(prefix, ns);\n        return this;\n    }\n\n    /**\n     * Tests if an entry for the given prefix exists.\n     *\n     * @param {String} prefix\n     * The prefix to test.\n     *\n     * @return {Boolean}\n     * Whether an entry for the given prefix exists.\n     */\n    hasPrefix(prefix) {\n        return this.prefixToNamespace.hasX(prefix);\n    }\n\n    /**\n     * Tests if an entry for the given namespace exists.\n     *\n     * @param {String} ns\n     * The namespace to test.\n     *\n     * @return {Boolean}\n     * Whether an entry for the given namespace exists.\n     */\n    hasNamespace(ns) {\n        return this.prefixToNamespace.hasY(ns);\n    }\n\n    /**\n     * Removes the entry for the given prefix from this PrefixMap.\n     *\n     * @param {String} prefix\n     * The prefix to remove.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-remove-omittable-deleter-void-DOMString-prefix\n     */\n    remove(prefix) {\n        this.prefixToNamespace.deleteX(prefix);\n    }\n\n    /**\n     * Given a valid CURIE for which a prefix is known, this method will return\n     * the resulting IRI. If the prefix is not known then this method will\n     * return null.\n     *\n     * @param {String} curie\n     * The CURIE to resolve.\n     *\n     * @return {String}\n     * The corresponding IRI.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-resolve-DOMString-DOMString-curie\n     */\n    resolve(curie) {\n        const [prefix, name = \"\"] = curie.split(\":\");\n        const ns = this.prefixToNamespace.convertXToY(prefix)[0];\n        if (ns) {\n            return ns + name;\n        }\n        return null;\n    }\n\n    /**\n     * Given an IRI for which a prefix is known this method returns a CURIE. If\n     * no prefix is known the original IRI is returned.\n     *\n     * @param {String} iri\n     * The IRI to shrink.\n     *\n     * @return {String}\n     * The corresponding CURIE.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-shrink-DOMString-DOMString-iri\n     */\n    shrink(iri) {\n        let result = this.trySplit(iri, iri.lastIndexOf(\"#\"));\n        if (result) {\n            return result;\n        }\n\n        result = this.trySplit(iri, iri.lastIndexOf(\"/\"));\n        if (result) {\n            return result;\n        }\n\n        for (let [prefix, ns] of this.prefixToNamespace) {\n            if (iri.startsWith(ns)) {\n                const name = iri.slice(ns.length);\n                return `${prefix}:${name}`;\n            }\n        }\n\n        return iri;\n    }\n\n    /**\n     * Splits an IRI and tries to find the prefix corresponding to the first\n     * part.\n     *\n     * @param {String} iri\n     * The IRI to split.\n     *\n     * @param {splitIndex} Number\n     * Where to split the IRI.\n     *\n     * @return {String}\n     * If the lookup was successful a CURIE is returned.\n     *\n     * @private\n     */\n    trySplit(iri, splitIndex) {\n        const ns   = iri.slice(0, splitIndex + 1);\n        const name = iri.slice(splitIndex + 1);\n\n        if (this.prefixToNamespace.hasY(iri)) {\n            const prefix = this.prefixToNamespace.convertYToX(ns)[0];\n            return `${prefix}:${name}`;\n        }\n    }\n\n    /**\n     * Sets the default namespace to be used when resolving CURIEs without prefix.\n     *\n     * @param {String} ns\n     * The default namespace.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-setDefault-void-DOMString-iri\n     */\n    setDefault(ns) {\n        this.set(\"\", ns);\n    }\n\n    /**\n     * Imports all entries from the given PrefixMap.\n     *\n     * @param {PrefixMap} prefixes\n     * The PrefixMap to import.\n     *\n     * @param {Boolean} [override=false]\n     * Whether conflicting entries in this map should be overriden by the ones\n     * in the given map.\n     *\n     * @return {PrefixMap}\n     * This PrefixMap to make the method chainable.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-addAll-PrefixMap-PrefixMap-prefixes-boolean-override\n     */\n    addAll(prefixes, override = false) {\n        for (let [prefix, ns] of prefixes) {\n            if (override || !this.prefixToNamespace.hasEither(prefix, ns)) {\n                this.set(prefix, ns);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Yields all prefixes in this map.\n     */\n    * prefixes() {\n        yield* this.prefixToNamespace.xs();\n    }\n\n    /**\n     * Yields all namespaces in this map.\n     */\n    * namespaces() {\n        yield* this.prefixToNamespace.ys();\n    }\n\n    /**\n     * Yields all prefix-IRI-entries in this map.\n     */\n    * entries() {\n        yield* this.prefixToNamespace.entries();\n    }\n\n    /**\n     * Yields all prefix-IRI-entries in this map.\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n\n    /**\n     * Returns a copy of this PrefixMap.\n     *\n     * @return {PrefixMap}\n     * A copy of this PrefixMap.\n     */\n    clone() {\n        return new PrefixMap(this);\n    }\n}\n"
  },
  {
    "__docId__": 86,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PrefixMap",
    "memberof": "src/PrefixMap.js",
    "longname": "src/PrefixMap.js~PrefixMap",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/PrefixMap.js",
    "importStyle": "PrefixMap",
    "description": "Maps from prefixes to IRIs and back.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#prefix-maps"
    ],
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 87,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "initialValue",
        "description": "An array with [term, iri] entries."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "prefixToNamespace",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#prefixToNamespace",
    "access": "private",
    "description": "Maps from prefixes to IRIs and back.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Tolkien1To1Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#size",
    "access": null,
    "description": "The number of entries in this PrefixMap.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#set",
    "access": null,
    "description": "Connects the given prefix and namespace.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-set-omittable-setter-void-DOMString-prefix-DOMString-iri"
    ],
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "The prefix to use."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ns",
        "description": "The namespace to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TermMap"
      ],
      "spread": false,
      "description": "The TermMap to make the object chainable."
    },
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasPrefix",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#hasPrefix",
    "access": null,
    "description": "Tests if an entry for the given prefix exists.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "The prefix to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether an entry for the given prefix exists."
    },
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasNamespace",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#hasNamespace",
    "access": null,
    "description": "Tests if an entry for the given namespace exists.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ns",
        "description": "The namespace to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether an entry for the given namespace exists."
    },
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#remove",
    "access": null,
    "description": "Removes the entry for the given prefix from this PrefixMap.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-remove-omittable-deleter-void-DOMString-prefix"
    ],
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "The prefix to remove."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resolve",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#resolve",
    "access": null,
    "description": "Given a valid CURIE for which a prefix is known, this method will return\nthe resulting IRI. If the prefix is not known then this method will\nreturn null.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-resolve-DOMString-DOMString-curie"
    ],
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "curie",
        "description": "The CURIE to resolve."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The corresponding IRI."
    },
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shrink",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#shrink",
    "access": null,
    "description": "Given an IRI for which a prefix is known this method returns a CURIE. If\nno prefix is known the original IRI is returned.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-shrink-DOMString-DOMString-iri"
    ],
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI to shrink."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The corresponding CURIE."
    },
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "trySplit",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#trySplit",
    "access": "private",
    "description": "Splits an IRI and tries to find the prefix corresponding to the first\npart.",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI to split."
      },
      {
        "nullable": null,
        "types": [
          "splitIndex"
        ],
        "spread": false,
        "optional": false,
        "name": "Number",
        "description": "Where to split the IRI."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "If the lookup was successful a CURIE is returned."
    },
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefault",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#setDefault",
    "access": null,
    "description": "Sets the default namespace to be used when resolving CURIEs without prefix.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-setDefault-void-DOMString-iri"
    ],
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ns",
        "description": "The default namespace."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addAll",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#addAll",
    "access": null,
    "description": "Imports all entries from the given PrefixMap.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-PrefixMap-addAll-PrefixMap-PrefixMap-prefixes-boolean-override"
    ],
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "PrefixMap"
        ],
        "spread": false,
        "optional": false,
        "name": "prefixes",
        "description": "The PrefixMap to import."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "override",
        "description": "Whether conflicting entries in this map should be overriden by the ones\nin the given map."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PrefixMap"
      ],
      "spread": false,
      "description": "This PrefixMap to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prefixes",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#prefixes",
    "access": null,
    "description": "Yields all prefixes in this map.",
    "lineNumber": 215,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 100,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "namespaces",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#namespaces",
    "access": null,
    "description": "Yields all namespaces in this map.",
    "lineNumber": 222,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 101,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entries",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#entries",
    "access": null,
    "description": "Yields all prefix-IRI-entries in this map.",
    "lineNumber": 229,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 102,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#[Symbol.iterator]",
    "access": null,
    "description": "Yields all prefix-IRI-entries in this map.",
    "lineNumber": 236,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/PrefixMap.js~PrefixMap",
    "longname": "src/PrefixMap.js~PrefixMap#clone",
    "access": null,
    "description": "Returns a copy of this PrefixMap.",
    "lineNumber": 246,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "PrefixMap"
      ],
      "spread": false,
      "description": "A copy of this PrefixMap."
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Profile.js",
    "memberof": null,
    "longname": "src/Profile.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import PrefixMap from \"./PrefixMap.js\";\nimport TermMap   from \"./TermMap.js\";\n\n/**\n * Provides an easy to use context for negotiating between CURIEs, Terms and\n * IRIs.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#profiles\n */\nexport default class Profile {\n\n    /**\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @param {PrefixMap} [conf.prefixes]\n     * The prefix map to use.\n     *\n     * @param {TermMap} {conf.terms}\n     * The term map to use.\n     */\n    constructor({ prefixes = new PrefixMap(), terms = new TermMap() } = {}) {\n\n        /**\n         * The prefix map.\n         *\n         * @type {PrefixMap}\n         * @private\n         */\n        this.prefixes = prefixes;\n\n        /**\n         * The term map.\n         *\n         * @type {TermMap}\n         * @private\n         */\n        this.terms = terms;\n    }\n\n    /**\n     * Given an term or CURIE this method will return an IRI.\n     *\n     * @param {String} toResolve\n     * A string term or CURIE.\n     *\n     * @return {String}\n     * The corresponding IRI.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Profile-resolve-DOMString-DOMString-toresolve\n     */\n    resolve(toResolve) {\n        if (toResolve.includes(\":\")) {\n            return this.prefixes.resolve(toResolve);\n        } else {\n            return this.terms.resolve(toResolve);\n        }\n    }\n\n    /**\n     * Returns a string representing the given RDFNode. Literals might be\n     * replaced with terms stored in this profile, while names nodes might be\n     * shrunk to a CURIE. If no matches are found in this profile, the normal\n     * toString method is called.\n     *\n     * @param {RDFNode} node\n     * The node to stringify.\n     *\n     * @param {Object} [conf]\n     * The configuration object.\n     *\n     * @param {Boolean} [conf.shrinkTerms=true]\n     * Whether terms should be shrunk.\n     *\n     * @param {Boolean} [conf.shrinkPrefixes=true]\n     * Whether prefixes should be shrunk.\n     *\n     * @return {String}\n     * The resulting string.\n     */\n    nodeToString(node, {shrinkTerms = true, shrinkPrefixes = true} = {}) {\n        if (shrinkTerms && node.interfaceName === \"Literal\") {\n            return this.terms.shrink(node.toString());\n        } else if (shrinkPrefixes && node.interfaceName === \"NamedNode\") {\n            return this.prefixes.shrink(node.toString());\n        } else {\n            return node.toString();\n        }\n    }\n\n    /**\n     * This method sets the default prefix for use when resolving CURIEs without\n     * a prefix, for example \":me\"\n     *\n     * @param {String} iri\n     * The IRI to use as the default prefix.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Profile-setDefaultPrefix-void-DOMString-iri\n     */\n    setDefaultPrefix(iri) {\n        this.prefixes.setDefault(iri);\n    }\n\n    /**\n     * This method associates an IRI with a prefix.\n     *\n     * @param {String} prefix\n     * The prefix to set. It must not contain any whitespace.\n     *\n     * @param {String} iri\n     * The IRI to associate with the prefix.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Profile-setPrefix-void-DOMString-prefix-DOMString-iri\n     */\n    setPrefix(prefix, iri) {\n        this.prefixes.set(prefix, iri);\n    }\n\n    /**\n     * This method sets the default vocabulary for use when resolving unknown\n     * terms.\n     *\n     * @param {String} iri\n     * The IRI to use as the default vocabulary.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Profile-setDefaultVocabulary-void-DOMString-iri\n     */\n    setDefaultVocabulary(iri) {\n        this.terms.setDefault(iri);\n    }\n\n    /**\n     * This method associates an IRI with a term.\n     *\n     * @param {String} term\n     * The term to set. It must not contain any whitespace or the\n     * : (single-colon) character.\n     *\n     * @param {String} iri\n     * The IRI to associate with the term.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Profile-setTerm-void-DOMString-term-DOMString-iri\n     */\n    setTerm(term, iri) {\n        this.terms.set(term, iri);\n    }\n\n    /**\n     * This method adds all prefixes and terms from the given profile. It allows\n     * easy updating and merging of different profiles, such as those exposed\n     * by parsers.\n     *\n     * @param {Profile} profile\n     * The profile to import.\n     *\n     * @param {Boolean} override\n     * If true then conflicting terms and prefixes will be overridden by those\n     * specified on the Profile being imported. By default imported terms and\n     * prefixes augment the existing set.\n     *\n     * @return {Profile}\n     * This profile to allow chaining.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Profile-importProfile-Profile-Profile-profile-boolean-override\n     */\n    importProfile(profile, override = false) {\n        this.prefixes.addAll(profile.prefixes, override);\n        this.terms.addAll(profile.terms, override);\n    }\n\n    /**\n     * Returns a copy of this Profile.\n     *\n     * @return {Profile}\n     * A copy of this Profile.\n     */\n    clone() {\n        return new Profile({\n            prefixes: this.prefixes.clone(),\n            terms:    this.terms.clone()\n        });\n    }\n}\n"
  },
  {
    "__docId__": 105,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Profile",
    "memberof": "src/Profile.js",
    "longname": "src/Profile.js~Profile",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/Profile.js",
    "importStyle": "Profile",
    "description": "Provides an easy to use context for negotiating between CURIEs, Terms and\nIRIs.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#profiles"
    ],
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#constructor",
    "access": null,
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "PrefixMap"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.prefixes",
        "description": "The prefix map to use."
      },
      {
        "nullable": null,
        "types": [
          "TermMap"
        ],
        "spread": false,
        "optional": false,
        "name": "{conf.terms}",
        "description": "The term map to use."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "prefixes",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#prefixes",
    "access": "private",
    "description": "The prefix map.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "PrefixMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "terms",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#terms",
    "access": "private",
    "description": "The term map.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "TermMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resolve",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#resolve",
    "access": null,
    "description": "Given an term or CURIE this method will return an IRI.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Profile-resolve-DOMString-DOMString-toresolve"
    ],
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "toResolve",
        "description": "A string term or CURIE."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The corresponding IRI."
    },
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nodeToString",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#nodeToString",
    "access": null,
    "description": "Returns a string representing the given RDFNode. Literals might be\nreplaced with terms stored in this profile, while names nodes might be\nshrunk to a CURIE. If no matches are found in this profile, the normal\ntoString method is called.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to stringify."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "conf.shrinkTerms",
        "description": "Whether terms should be shrunk."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "conf.shrinkPrefixes",
        "description": "Whether prefixes should be shrunk."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The resulting string."
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefaultPrefix",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#setDefaultPrefix",
    "access": null,
    "description": "This method sets the default prefix for use when resolving CURIEs without\na prefix, for example \":me\"",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Profile-setDefaultPrefix-void-DOMString-iri"
    ],
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI to use as the default prefix."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setPrefix",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#setPrefix",
    "access": null,
    "description": "This method associates an IRI with a prefix.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Profile-setPrefix-void-DOMString-prefix-DOMString-iri"
    ],
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "The prefix to set. It must not contain any whitespace."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI to associate with the prefix."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefaultVocabulary",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#setDefaultVocabulary",
    "access": null,
    "description": "This method sets the default vocabulary for use when resolving unknown\nterms.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Profile-setDefaultVocabulary-void-DOMString-iri"
    ],
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI to use as the default vocabulary."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setTerm",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#setTerm",
    "access": null,
    "description": "This method associates an IRI with a term.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Profile-setTerm-void-DOMString-term-DOMString-iri"
    ],
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "term",
        "description": "The term to set. It must not contain any whitespace or the\n: (single-colon) character."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI to associate with the term."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "importProfile",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#importProfile",
    "access": null,
    "description": "This method adds all prefixes and terms from the given profile. It allows\neasy updating and merging of different profiles, such as those exposed\nby parsers.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Profile-importProfile-Profile-Profile-profile-boolean-override"
    ],
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": false,
        "name": "profile",
        "description": "The profile to import."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "override",
        "description": "If true then conflicting terms and prefixes will be overridden by those\nspecified on the Profile being imported. By default imported terms and\nprefixes augment the existing set."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Profile"
      ],
      "spread": false,
      "description": "This profile to allow chaining."
    },
    "generator": false
  },
  {
    "__docId__": 116,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/Profile.js~Profile",
    "longname": "src/Profile.js~Profile#clone",
    "access": null,
    "description": "Returns a copy of this Profile.",
    "lineNumber": 177,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Profile"
      ],
      "spread": false,
      "description": "A copy of this Profile."
    },
    "generator": false
  },
  {
    "__docId__": 117,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/RDFEnvironment.js",
    "memberof": null,
    "longname": "src/RDFEnvironment.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {IDGenerator} from \"@ignavia/util\";\n\nimport Graph     from \"./Graph.js\";\nimport Triple    from \"./Triple.js\";\nimport BlankNode from \"./BlankNode.js\";\nimport Literal   from \"./Literal.js\";\nimport NamedNode from \"./NamedNode.js\";\nimport Profile   from \"./Profile.js\";\nimport PrefixMap from \"./PrefixMap.js\";\nimport TermMap   from \"./TermMap.js\";\n\n/**\n * Contains the most important prefixes.\n *\n * @type {PrefixMap}\n * @ignore\n */\nconst defaultPrefixes = new PrefixMap([\n    [\"owl\",  \"http://www.w3.org/2002/07/owl#\"],\n    [\"rdf\",  \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"],\n    [\"rdfs\", \"http://www.w3.org/2000/01/rdf-schema#\"],\n    [\"rdfa\", \"http://www.w3.org/ns/rdfa#\"],\n    [\"xhv\",  \"http://www.w3.org/1999/xhtml/vocab#\"],\n    [\"xml\",  \"http://www.w3.org/XML/1998/namespace#\"],\n    [\"xsd\",  \"http://www.w3.org/2001/XMLSchema#\"]\n]);\n\n/**\n * Provides IDs for blank nodes.\n *\n * @type {IDGenerator}\n * @ignore\n */\nconst idGenerator = new IDGenerator(\"hfld#\");\n\n/**\n * A high level API for working with RDF.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#rdf-environment\n */\nexport default class RDFEnvironment extends Profile {\n\n    /**\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @param {PrefixMap} [conf.prefixes]\n     * The prefix map to use.\n     *\n     * @param {TermMap} {conf.terms}\n     * The term map to use.\n     */\n    constructor(conf = {}) {\n        super(conf);\n        this.prefixes.addAll(defaultPrefixes);\n    }\n\n    /**\n     * Creates a new Graph.\n     *\n     * @param {Array} [triples=[]]\n     * The triples to add to the graph initially.\n     *\n     * @return\n     * The created graph.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createGraph-Graph---Triple-triples\n     */\n    createGraph(triples = []) {\n        return new Graph(triples);\n    }\n\n    /**\n     * Creates a new triple.\n     *\n     * @param {RDFNode} subject\n     * The subject of the triple.\n     *\n     * @param {RDFNode} predicate\n     * The predicate of the triple.\n     *\n     * @param {RDFNode} object\n     * The object of the triple.\n     *\n     * @return {Triple}\n     * The created triple.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createTriple-Triple-RDFNode-subject-RDFNode-predicate-RDFNode-object\n     */\n    createTriple(subject, predicate, object) {\n        return new Triple(subject, predicate, object);\n    }\n\n    /**\n     * Creates a new BlankNode.\n     *\n     * @return {BlankNode}\n     * The created blank node.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createBlankNode-BlankNode\n     */\n    createBlankNode() {\n        return new BlankNode(idGenerator.next());\n    }\n\n    /**\n     * Creates a new literal.\n     *\n     * @param {String} value\n     * The value of this literal.\n     *\n     * @param {Object} options\n     * Contains the remaining parameters.\n     *\n     * @param {String} [options.language=null]\n     * The language of this literal.\n     *\n     * @param {String} [options.datatype=null]\n     * The datatype of this literal.\n     *\n     * @return {Literal}\n     * The created literal.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createLiteral-Literal-DOMString-value-DOMString-language-NamedNode-datatype\n     */\n    createLiteral(value, {language, datatype} = {}) {\n        return new Literal(value, {language, datatype});\n    }\n\n    /**\n     * Creates a new named node.\n     *\n     * @param {String} value\n     * The IRI identifier of this node or a corresponding CURIE or term.\n     *\n     * @return {NamedNode}\n     * The created named node.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createNamedNode-NamedNode-DOMString-value\n     */\n    createNamedNode(value) {\n        const iri = this.resolve(value) || value;\n        return new NamedNode(iri);\n    }\n\n    /**\n     * Creates a function from a given filter and a callback. The filter gets a\n     * triple and if it returns true, the callback is called with that triple.\n     *\n     * @param {Function} test\n     * The filter.\n     *\n     * @param {Function} action\n     * The callback.\n     *\n     * @return {Function}\n     * The combined function.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createAction-TripleAction-TripleFilter-test-TripleCallback-action\n     */\n    createAction(test, action) {\n        return function (triple) {\n            if (test(triple)) {\n                action(triple);\n            }\n        };\n    }\n\n    /**\n     * Creates a new Profile.\n     *\n     * @param {Boolean} [empty=false]\n     * Whether the Profile should be empty or if it should include all entries\n     * of this environment.\n     *\n     * @return {Profile}\n     * The created profile.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createProfile-Profile-boolean-empty\n     */\n    createProfile(empty = false) {\n        return empty ? new Profile() : this.clone();\n    }\n\n    /**\n     * Creates a new TermMap.\n     *\n     * @param {Boolean} [empty=false]\n     * Whether the TermMap should be empty or if it should include all entries\n     * of this environment.\n     *\n     * @return {TermMap}\n     * The created TermMap.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createTermMap-TermMap-boolean-empty\n     */\n    createTermMap(empty = false) {\n        return empty ?  new TermMap() : this.terms.clone();\n    }\n\n    /**\n     * Creates a new PrefixMap.\n     *\n     * @param {Boolean} [empty=false]\n     * Whether the PrefixMap should be empty or if it should include all entries\n     * of this environment.\n     *\n     * @return {PrefixMap}\n     * The created PrefixMap.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createPrefixMap-PrefixMap-boolean-empty\n     */\n    createPrefixMap(empty = false) {\n        return empty ? new PrefixMap() : this.prefixes.clone();\n    }\n}\n"
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultPrefixes",
    "memberof": "src/RDFEnvironment.js",
    "longname": "src/RDFEnvironment.js~defaultPrefixes",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/RDFEnvironment.js",
    "importStyle": null,
    "description": "Contains the most important prefixes.",
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "PrefixMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "idGenerator",
    "memberof": "src/RDFEnvironment.js",
    "longname": "src/RDFEnvironment.js~idGenerator",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/RDFEnvironment.js",
    "importStyle": null,
    "description": "Provides IDs for blank nodes.",
    "lineNumber": 34,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "IDGenerator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "RDFEnvironment",
    "memberof": "src/RDFEnvironment.js",
    "longname": "src/RDFEnvironment.js~RDFEnvironment",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/RDFEnvironment.js",
    "importStyle": "RDFEnvironment",
    "description": "A high level API for working with RDF.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#rdf-environment"
    ],
    "lineNumber": 41,
    "interface": false,
    "extends": [
      "src/Profile.js~Profile"
    ]
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#constructor",
    "access": null,
    "description": "",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "PrefixMap"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.prefixes",
        "description": "The prefix map to use."
      },
      {
        "nullable": null,
        "types": [
          "TermMap"
        ],
        "spread": false,
        "optional": false,
        "name": "{conf.terms}",
        "description": "The term map to use."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createGraph",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#createGraph",
    "access": null,
    "description": "Creates a new Graph.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createGraph-Graph---Triple-triples"
    ],
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "triples",
        "description": "The triples to add to the graph initially."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The created graph."
    },
    "generator": false
  },
  {
    "__docId__": 123,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createTriple",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#createTriple",
    "access": null,
    "description": "Creates a new triple.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createTriple-Triple-RDFNode-subject-RDFNode-predicate-RDFNode-object"
    ],
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject of the triple."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The predicate of the triple."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object of the triple."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Triple"
      ],
      "spread": false,
      "description": "The created triple."
    },
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createBlankNode",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#createBlankNode",
    "access": null,
    "description": "Creates a new BlankNode.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createBlankNode-BlankNode"
    ],
    "lineNumber": 102,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "BlankNode"
      ],
      "spread": false,
      "description": "The created blank node."
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createLiteral",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#createLiteral",
    "access": null,
    "description": "Creates a new literal.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createLiteral-Literal-DOMString-value-DOMString-language-NamedNode-datatype"
    ],
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value of this literal."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Contains the remaining parameters."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.language",
        "description": "The language of this literal."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.datatype",
        "description": "The datatype of this literal."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Literal"
      ],
      "spread": false,
      "description": "The created literal."
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createNamedNode",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#createNamedNode",
    "access": null,
    "description": "Creates a new named node.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createNamedNode-NamedNode-DOMString-value"
    ],
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The IRI identifier of this node or a corresponding CURIE or term."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NamedNode"
      ],
      "spread": false,
      "description": "The created named node."
    },
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createAction",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#createAction",
    "access": null,
    "description": "Creates a function from a given filter and a callback. The filter gets a\ntriple and if it returns true, the callback is called with that triple.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createAction-TripleAction-TripleFilter-test-TripleCallback-action"
    ],
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The filter."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "The callback."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The combined function."
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createProfile",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#createProfile",
    "access": null,
    "description": "Creates a new Profile.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createProfile-Profile-boolean-empty"
    ],
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "empty",
        "description": "Whether the Profile should be empty or if it should include all entries\nof this environment."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Profile"
      ],
      "spread": false,
      "description": "The created profile."
    },
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createTermMap",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#createTermMap",
    "access": null,
    "description": "Creates a new TermMap.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createTermMap-TermMap-boolean-empty"
    ],
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "empty",
        "description": "Whether the TermMap should be empty or if it should include all entries\nof this environment."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TermMap"
      ],
      "spread": false,
      "description": "The created TermMap."
    },
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createPrefixMap",
    "memberof": "src/RDFEnvironment.js~RDFEnvironment",
    "longname": "src/RDFEnvironment.js~RDFEnvironment#createPrefixMap",
    "access": null,
    "description": "Creates a new PrefixMap.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFEnvironment-createPrefixMap-PrefixMap-boolean-empty"
    ],
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "empty",
        "description": "Whether the PrefixMap should be empty or if it should include all entries\nof this environment."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PrefixMap"
      ],
      "spread": false,
      "description": "The created PrefixMap."
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/RDFNode.js",
    "memberof": null,
    "longname": "src/RDFNode.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {IDGenerator} from \"@ignavia/util\";\n\n// import BlankNode from \"./BlankNode.js\";\n// import Literal   from \"./Literal.js\";\n// import NamedNode from \"./NamedNode.js\";\n\n/**\n * Provides IDs for RDFNodes.\n *\n * @type {IDGenerator}\n * @ignore\n */\nconst idGenerator = new IDGenerator(\"n\");\n\n/**\n * Defines an interface for RDFNodes.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#nodes\n */\nexport default class RDFNode {\n\n    // /**\n    //  * Creates an appropriate RDFNode for an N-Triples string.\n    //  *\n    //  * @param {String} ntString\n    //  * The N-Triples string to parse.\n    //  *\n    //  * @return {RDFNode}\n    //  * The created RDFNode.\n    //  *\n    //  * @throws\n    //  * If the string cannot be parsed.\n    //  */\n    // static fromNT(ntString) {\n    //     if (BlankNode.isNTBlankNode(ntString)) {\n    //         return BlankNode.fromNT(ntString);\n    //     } else if (Literal.isNTLiteral(ntString)) {\n    //         return Literal.fromNT(ntString);\n    //     } else if (NamedNode.isNTNamedNode(ntString)) {\n    //         return NamedNode.fromNT(ntString);\n    //     } else {\n    //         throw new Error(`Could not parse ${ntString}.`);\n    //     }\n    // }\n\n    /**\n     * @param {String} interfaceName\n     * The string name of the current interface. This is one of \"NamedNode\",\n     * \"BlankNode\" and \"Literal\".\n     *\n     * @param {*} nominalValue\n     * The value of this RDFNode.\n     */\n    constructor(interfaceName, nominalValue) {\n\n        /**\n         * The string name of the current interface. This is one of \"NamedNode\",\n         * \"BlankNode\" and \"Literal\".\n         *\n         * @type {String}\n         */\n        this.interfaceName = interfaceName;\n\n        /**\n         * The value of this RDFNode.\n         *\n         * @type {*}\n         */\n        this.nominalValue = nominalValue;\n\n        /**\n         * The ID of this RDFNode.\n         *\n         * @type {String}\n         */\n        this.id = idGenerator.next();\n    }\n\n    /**\n     * Tests if this node is a blank node.\n     *\n     * @return {boolean}\n     * If this node is a blank node.\n     */\n    isBlankNode() {\n        return this.interfaceName === \"BlankNode\";\n    }\n\n    /**\n     * Tests if this node is a literal.\n     *\n     * @return {boolean}\n     * If this node is a literal.\n     */\n    isLiteral() {\n        return this.interfaceName === \"Literal\";\n    }\n\n    /**\n     * Tests if this node is a named node.\n     *\n     * @return {boolean}\n     * If this node is a named node.\n     */\n    isNamedNode() {\n        return this.interfaceName === \"NamedNode\";\n    }\n\n    /**\n     * Tests if this RDFNode is equivalent to the given value.\n     *\n     * @param {*} toCompare\n     * The value to test.\n     *\n     * @return {Boolean}\n     * If this RDFNode is equivalent to the given value.\n     *\n     * @abstract\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFNode-equals-boolean-any-tocompare\n     */\n    equals(toCompare) {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Provides access to the native value for this RDFNode.\n     *\n     * @return {*}\n     * The native value of this RDFNode.\n     *\n     * @abstract\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFNode-valueOf-any\n     */\n    valueOf() {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Returns the stringification of this RDFNode.\n     *\n     * @return {String}\n     * The stringification of this RDFNode.\n     *\n     * @abstract\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFNode-toString-DOMString\n     */\n    toString() {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Returns the N-Triples representation of this RDFNode.\n     *\n     * @return {String}\n     * The N-Triples representation of this RDFNode.\n     *\n     * @abstract\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-RDFNode-toNT-DOMString\n     */\n    toNT() {\n        throw new Error(\"Calling an abstract method.\");\n    }\n}\n"
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "idGenerator",
    "memberof": "src/RDFNode.js",
    "longname": "src/RDFNode.js~idGenerator",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/RDFNode.js",
    "importStyle": null,
    "description": "Provides IDs for RDFNodes.",
    "lineNumber": 13,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "IDGenerator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "RDFNode",
    "memberof": "src/RDFNode.js",
    "longname": "src/RDFNode.js~RDFNode",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/RDFNode.js",
    "importStyle": "RDFNode",
    "description": "Defines an interface for RDFNodes.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#nodes"
    ],
    "lineNumber": 20,
    "interface": false
  },
  {
    "__docId__": 134,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#constructor",
    "access": null,
    "description": "",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "interfaceName",
        "description": "The string name of the current interface. This is one of \"NamedNode\",\n\"BlankNode\" and \"Literal\"."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nominalValue",
        "description": "The value of this RDFNode."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "interfaceName",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#interfaceName",
    "access": null,
    "description": "The string name of the current interface. This is one of \"NamedNode\",\n\"BlankNode\" and \"Literal\".",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nominalValue",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#nominalValue",
    "access": null,
    "description": "The value of this RDFNode.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#id",
    "access": null,
    "description": "The ID of this RDFNode.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isBlankNode",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#isBlankNode",
    "access": null,
    "description": "Tests if this node is a blank node.",
    "lineNumber": 85,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If this node is a blank node."
    },
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isLiteral",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#isLiteral",
    "access": null,
    "description": "Tests if this node is a literal.",
    "lineNumber": 95,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If this node is a literal."
    },
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNamedNode",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#isNamedNode",
    "access": null,
    "description": "Tests if this node is a named node.",
    "lineNumber": 105,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If this node is a named node."
    },
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#equals",
    "access": null,
    "description": "Tests if this RDFNode is equivalent to the given value.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFNode-equals-boolean-any-tocompare"
    ],
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "toCompare",
        "description": "The value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If this RDFNode is equivalent to the given value."
    },
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "valueOf",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#valueOf",
    "access": null,
    "description": "Provides access to the native value for this RDFNode.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFNode-valueOf-any"
    ],
    "lineNumber": 134,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The native value of this RDFNode."
    },
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#toString",
    "access": null,
    "description": "Returns the stringification of this RDFNode.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFNode-toString-DOMString"
    ],
    "lineNumber": 147,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The stringification of this RDFNode."
    },
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toNT",
    "memberof": "src/RDFNode.js~RDFNode",
    "longname": "src/RDFNode.js~RDFNode#toNT",
    "access": null,
    "description": "Returns the N-Triples representation of this RDFNode.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-RDFNode-toNT-DOMString"
    ],
    "lineNumber": 160,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The N-Triples representation of this RDFNode."
    },
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/TermMap.js",
    "memberof": null,
    "longname": "src/TermMap.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Tolkien1To1Map} from \"@ignavia/util\";\n\n/**\n * Maps from terms to IRIs and back.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#term-maps\n */\nexport default class TermMap {\n\n    /**\n     * @param {Array} [initialValue=[]]\n     * An array with [term, iri] entries.\n     */\n    constructor(initialValues = []) {\n\n        /**\n         * Maps from terms to IRIs and back.\n         *\n         * @type {Tolkien1To1Map}\n         * @private\n         */\n        this.termToIRI = new Tolkien1To1Map();\n\n        /**\n         * The default IRI to use if a term cannot be resolved.\n         *\n         * @type {String}\n         * @private\n         */\n        this.default = undefined;\n\n        // Add initial values\n        for (let [term, iri] of initialValues) {\n            this.set(term, iri);\n        }\n    }\n\n    /**\n     * The number of entries in this TermMap.\n     *\n     * @type {Number}\n     */\n    get size() {\n        return this.termToIRI.size;\n    }\n\n    /**\n     * Connects the given term and IRI.\n     *\n     * @param {String} term\n     * The term to use. It must not contain any whitespace or the : (single-colon)\n     * character.\n     *\n     * @param {String} iri\n     * The IRI to use.\n     *\n     * @return {TermMap}\n     * The TermMap to make the object chainable.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-set-omittable-setter-void-DOMString-term-DOMString-iri\n     */\n    set(term, iri) {\n        this.termToIRI.add(term, iri);\n        return this;\n    }\n\n    /**\n     * Tests if an entry for the given term exists.\n     *\n     * @param {String} term\n     * The term to test.\n     *\n     * @return {Boolean}\n     * Whether an entry for the given term exists.\n     */\n    hasTerm(term) {\n        return this.termToIRI.hasX(term);\n    }\n\n    /**\n     * Tests if an entry for the given IRI exists.\n     *\n     * @param {String} iri\n     * The IRI to test.\n     *\n     * @return {Boolean}\n     * Whether an entry for the given IRI exists.\n     */\n    hasIRI(iri) {\n        return this.termToIRI.hasY(iri);\n    }\n\n    /**\n     * Removes the entry for the given term from this TermMap.\n     *\n     * @param {String} term\n     * The term to remove.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-remove-omittable-deleter-void-DOMString-term\n     */\n    remove(term) {\n        this.termToIRI.deleteX(term);\n    }\n\n    /**\n     * Given a valid term for which an IRI is known, this method will return\n     * the resulting IRI. If no term is known and a default has been set, the\n     * IRI is obtained by concatenating the term and the default iri. Otherwise\n     * null is returned.\n     *\n     * @param {String} term\n     * The term to resolve.\n     *\n     * @return {String}\n     * The corresponding IRI.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-resolve-DOMString-DOMString-term\n     */\n    resolve(term) {\n        if (this.termToIRI.hasX(term)) {\n            return this.termToIRI.convertXToY(term)[0];\n        } else if (this.default) {\n            return this.default + term;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Given an IRI for which an term is known this method returns a term. If\n     * no term is known the original IRI is returned.\n     *\n     * @param {String} iri\n     * The IRI to shrink.\n     *\n     * @return {String}\n     * The corresponding term.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-shrink-DOMString-DOMString-iri\n     */\n    shrink(iri) {\n        if (this.termToIRI.hasY(iri)) {\n            return this.termToIRI.convertYToX(iri)[0];\n        } else {\n            return iri;\n        }\n    }\n\n    /**\n     * Sets the default IRI to be used when an term cannot be resolved.\n     *\n     * @param {String} iri\n     * The default IRI.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-setDefault-void-DOMString-iri\n     */\n    setDefault(iri) {\n        this.default = iri;\n    }\n\n    /**\n     * Imports all entries from the given TermMap.\n     *\n     * @param {TermMap} terms\n     * The TermMap to import.\n     *\n     * @param {Boolean} [override=false]\n     * Whether conflicting entries in this map should be overriden by the ones\n     * in the given map.\n     *\n     * @return {TermMap}\n     * This TermMap to make the method chainable.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-addAll-TermmMap-TermMap-terms-boolean-override\n     */\n    addAll(terms, override = false) {\n        for (let [term, iri] of terms) {\n            if (override || !this.termToIRI.hasEither(term, iri)) {\n                this.set(term, iri);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Yields all terms in this map.\n     */\n    * terms() {\n        yield* this.termToIRI.xs();\n    }\n\n    /**\n     * Yields all IRIs in this map.\n     */\n    * iris() {\n        yield* this.termToIRI.ys();\n    }\n\n    /**\n     * Yields all term-IRI-entries in this map.\n     */\n    * entries() {\n        yield* this.termToIRI.entries();\n    }\n\n    /**\n     * Yields all term-IRI-entries in this map.\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n\n    /**\n     * Returns a copy of this TermMap.\n     *\n     * @return {TermMap}\n     * A copy of this TermMap.\n     */\n    clone() {\n        return new TermMap(this);\n    }\n}\n"
  },
  {
    "__docId__": 146,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TermMap",
    "memberof": "src/TermMap.js",
    "longname": "src/TermMap.js~TermMap",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/TermMap.js",
    "importStyle": "TermMap",
    "description": "Maps from terms to IRIs and back.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#term-maps"
    ],
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "initialValue",
        "description": "An array with [term, iri] entries."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "termToIRI",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#termToIRI",
    "access": "private",
    "description": "Maps from terms to IRIs and back.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Tolkien1To1Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "default",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#default",
    "access": "private",
    "description": "The default IRI to use if a term cannot be resolved.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#size",
    "access": null,
    "description": "The number of entries in this TermMap.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#set",
    "access": null,
    "description": "Connects the given term and IRI.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-set-omittable-setter-void-DOMString-term-DOMString-iri"
    ],
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "term",
        "description": "The term to use. It must not contain any whitespace or the : (single-colon)\ncharacter."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TermMap"
      ],
      "spread": false,
      "description": "The TermMap to make the object chainable."
    },
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasTerm",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#hasTerm",
    "access": null,
    "description": "Tests if an entry for the given term exists.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "term",
        "description": "The term to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether an entry for the given term exists."
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasIRI",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#hasIRI",
    "access": null,
    "description": "Tests if an entry for the given IRI exists.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether an entry for the given IRI exists."
    },
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#remove",
    "access": null,
    "description": "Removes the entry for the given term from this TermMap.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-remove-omittable-deleter-void-DOMString-term"
    ],
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "term",
        "description": "The term to remove."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resolve",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#resolve",
    "access": null,
    "description": "Given a valid term for which an IRI is known, this method will return\nthe resulting IRI. If no term is known and a default has been set, the\nIRI is obtained by concatenating the term and the default iri. Otherwise\nnull is returned.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-resolve-DOMString-DOMString-term"
    ],
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "term",
        "description": "The term to resolve."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The corresponding IRI."
    },
    "generator": false
  },
  {
    "__docId__": 156,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shrink",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#shrink",
    "access": null,
    "description": "Given an IRI for which an term is known this method returns a term. If\nno term is known the original IRI is returned.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-shrink-DOMString-DOMString-iri"
    ],
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The IRI to shrink."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The corresponding term."
    },
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefault",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#setDefault",
    "access": null,
    "description": "Sets the default IRI to be used when an term cannot be resolved.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-setDefault-void-DOMString-iri"
    ],
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "iri",
        "description": "The default IRI."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "default",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#default",
    "access": null,
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addAll",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#addAll",
    "access": null,
    "description": "Imports all entries from the given TermMap.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-TermMap-addAll-TermmMap-TermMap-terms-boolean-override"
    ],
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "TermMap"
        ],
        "spread": false,
        "optional": false,
        "name": "terms",
        "description": "The TermMap to import."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "override",
        "description": "Whether conflicting entries in this map should be overriden by the ones\nin the given map."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TermMap"
      ],
      "spread": false,
      "description": "This TermMap to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "terms",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#terms",
    "access": null,
    "description": "Yields all terms in this map.",
    "lineNumber": 188,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 161,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iris",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#iris",
    "access": null,
    "description": "Yields all IRIs in this map.",
    "lineNumber": 195,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 162,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entries",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#entries",
    "access": null,
    "description": "Yields all term-IRI-entries in this map.",
    "lineNumber": 202,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#[Symbol.iterator]",
    "access": null,
    "description": "Yields all term-IRI-entries in this map.",
    "lineNumber": 209,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/TermMap.js~TermMap",
    "longname": "src/TermMap.js~TermMap#clone",
    "access": null,
    "description": "Returns a copy of this TermMap.",
    "lineNumber": 219,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "TermMap"
      ],
      "spread": false,
      "description": "A copy of this TermMap."
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Triple.js",
    "memberof": null,
    "longname": "src/Triple.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {IDGenerator} from \"@ignavia/util\";\n\n/**\n * Provides IDs for triple.\n *\n * @type {IDGenerator}\n * @ignore\n */\nconst idGenerator = new IDGenerator(\"t\");\n\n/**\n * Represents an RDF triple.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#triples\n */\nexport default class Triple {\n\n    /**\n     * @param {RDFNode} subject\n     * The subject associated with the triple.\n     *\n     * @param {RDFNode} predicate\n     * The predicate associated with the triple.\n     *\n     * @param {RDFNode} object\n     * The object associated with the triple.\n     */\n    constructor(subject, predicate, object) {\n\n        /**\n         * The subject associated with the triple.\n         *\n         * @type {RDFNode}\n         */\n        this.subject = subject;\n\n         /**\n         * The predicate associated with the triple.\n         *\n         * @type {RDFNode}\n         */\n        this.predicate = predicate;\n\n         /**\n         * The object associated with the triple.\n         *\n         * @type {RDFNode}\n         */\n        this.object = object;\n\n        /**\n         * The ID of this triple.\n         *\n         * @type {String}\n         */\n        this.id = idGenerator.next();\n    }\n\n    /**\n     * Tests if another triple is equivalent to this one.\n     *\n     * @param {Triple} otherTriple\n     * The other triple.\n     *\n     * @return {Boolean}\n     * If the other triple is equivalent to this one.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Triple-equals-boolean-Triple-otherTriple\n     */\n    equals(otherTriple) {\n        return otherTriple instanceof Triple                  &&\n               (this.subject).equals(otherTriple.subject)     &&\n               (this.predicate).equals(otherTriple.predicate) &&\n               (this.object).equals(otherTriple.object);\n    }\n\n    /**\n     * Converts this triple into a string in N-Triples notation.\n     *\n     * @return {String}\n     * This triple in N-Triples notation.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-Triple-toString-stringifier-DOMString\n     */\n    toString() {\n        return `${this.subject.toNT()} ${this.predicate.toNT()} ${this.object.toNT()}`;\n    }\n}\n"
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "idGenerator",
    "memberof": "src/Triple.js",
    "longname": "src/Triple.js~idGenerator",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/Triple.js",
    "importStyle": null,
    "description": "Provides IDs for triple.",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "IDGenerator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Triple",
    "memberof": "src/Triple.js",
    "longname": "src/Triple.js~Triple",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/Triple.js",
    "importStyle": "Triple",
    "description": "Represents an RDF triple.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#triples"
    ],
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 168,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Triple.js~Triple",
    "longname": "src/Triple.js~Triple#constructor",
    "access": null,
    "description": "",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject associated with the triple."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The predicate associated with the triple."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object associated with the triple."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subject",
    "memberof": "src/Triple.js~Triple",
    "longname": "src/Triple.js~Triple#subject",
    "access": null,
    "description": "The subject associated with the triple.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "predicate",
    "memberof": "src/Triple.js~Triple",
    "longname": "src/Triple.js~Triple#predicate",
    "access": null,
    "description": "The predicate associated with the triple.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "object",
    "memberof": "src/Triple.js~Triple",
    "longname": "src/Triple.js~Triple#object",
    "access": null,
    "description": "The object associated with the triple.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/Triple.js~Triple",
    "longname": "src/Triple.js~Triple#id",
    "access": null,
    "description": "The ID of this triple.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/Triple.js~Triple",
    "longname": "src/Triple.js~Triple#equals",
    "access": null,
    "description": "Tests if another triple is equivalent to this one.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Triple-equals-boolean-Triple-otherTriple"
    ],
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Triple"
        ],
        "spread": false,
        "optional": false,
        "name": "otherTriple",
        "description": "The other triple."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the other triple is equivalent to this one."
    },
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Triple.js~Triple",
    "longname": "src/Triple.js~Triple#toString",
    "access": null,
    "description": "Converts this triple into a string in N-Triples notation.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-Triple-toString-stringifier-DOMString"
    ],
    "lineNumber": 85,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "This triple in N-Triples notation."
    },
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/TurtleReader.js",
    "memberof": null,
    "longname": "src/TurtleReader.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import n3Parser from \"./n3/n3Parser.js\";\n\nimport Graph     from \"./Graph.js\";\nimport Triple    from \"./Triple.js\";\nimport BlankNode from \"./BlankNode.js\";\nimport Literal   from \"./Literal.js\";\nimport NamedNode from \"./NamedNode.js\";\nimport Profile   from \"./Profile.js\";\n\n/**\n * Transforms a Turtle string into a graph and a profile.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#data-parsers\n */\nexport default class TurtleReader {\n\n    /**\n     *\n     */\n    constructor() {\n\n        /**\n         * The N3.js parser.\n         *\n         * @type {*}\n         * @private\n         */\n        this.parser = n3Parser();\n    }\n\n    /**\n     * Checks if the given string represents an IRI.\n     *\n     * @param {String} entityString\n     * The entity to test.\n     *\n     * @return {Boolean}\n     * Whether the string represents an IRI.\n     */\n    isIRI(entityString) {\n        return !this.isLiteral(entityString) && !this.isBlank(entityString);\n    }\n\n    /**\n     * Checks if the given string represents a literal.\n     *\n     * @param {String} entityString\n     * The entity to test.\n     *\n     * @return {Boolean}\n     * Whether the string represents a literal.\n     */\n    isLiteral(entityString) {\n        return entityString.startsWith(`\"`);\n    }\n\n    /**\n     * Checks if the given string represents a blank node.\n     *\n     * @param {String} entityString\n     * The entity to test.\n     *\n     * @return {Boolean}\n     * Whether the string represents a blank node.\n     */\n    isBlank(entityString) {\n        return entityString.startsWith(\"_:\");\n    };\n\n    /**\n     * Returns the value of the literal.\n     *\n     * @param {String} literalString\n     * The literal to parse.\n     *\n     * @return {String}\n     * The value of the literal.\n     *\n     * @throws {Error}\n     * If the provided string does not represent a literal.\n     *\n     * @private\n     */\n    getLiteralValue(literalString) {\n        const regex = /^\"([^]*)\"/;\n\n        if (!regex.test(literalString)) {\n            throw new Error(`${literalString} is not a literal.`);\n        }\n\n        const [, value] = regex.exec(literalString);\n        return value;\n    }\n\n    /**\n     * Returns the datatype of the literal.\n     *\n     * @param {String} literalString\n     * The literal to parse.\n     *\n     * @return {String}\n     * The datatype of the literal.\n     *\n     * @throws {Error}\n     * If the provided string does not represent a literal.\n     *\n     * @private\n     */\n    getLiteralType(literalString) {\n        const regex = /^\"[^]*\"(?:\\^\\^([^\"]+)|(@)[^@\"]+)?$/;\n\n        if (!regex.test(literalString)) {\n            throw new Error(`${literalString} is not a literal.`);\n        }\n\n        const [, type, language] = regex.exec(literalString);\n        if (type) {\n            return type;\n        } else if (language) {\n            return \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\";\n        } else {\n            return \"http://www.w3.org/2001/XMLSchema#string\";\n        }\n    }\n\n    /**\n     * Returns the language of the literal.\n     *\n     * @param {String} literalString\n     * The literal to parse.\n     *\n     * @return {String}\n     * The language of the literal.\n     *\n     * @throws {Error}\n     * If the provided string does not represent a literal.\n     *\n     * @private\n     */\n    getLiteralLanguage(literalString) {\n        const regex = /^\"[^]*\"(?:@([^@\"]+)|\\^\\^[^\"]+)?$/;\n\n        if (!regex.test(literalString)) {\n            throw new Error(`${literalString} is not a literal.`);\n        }\n\n        const [, language] = regex.exec(literalString);\n        if (language) {\n            return language.toLowerCase();\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Transforms an N3 entity (subject, predicate, object as a string) into the\n     * corresponding RDFNode.\n     *\n     * @param {String} entityString\n     * The word to transform.\n     *\n     * @param {Object} options\n     * The options object.\n     *\n     * @param {Boolean} [options.allowBlank=true]\n     * Whether blank nodes are allowed.\n     *\n     * @param {Boolean} [options.allowNamed=true]\n     * Whether named nodes are allowed.\n     *\n     * @param {Boolean} [options.allowLiteral=true]\n     * Whether literals are allowed.\n     *\n     * @return {RDFNode}\n     * The respective RDFNode.\n     *\n     * @throws {Error}\n     * If the word is invalid.\n     */\n    parseN3Entity(entityString, {allowBlank = true, allowNamed = true, allowLiteral = true} = {}) {\n        if (allowBlank && this.isBlank(entityString)) {\n            entityString = entityString.replace(/^_:b[0-9]+_/, \"\");\n            return new BlankNode(entityString);\n        } else if (allowNamed && this.isIRI(entityString)) {\n            return new NamedNode(entityString);\n        } else if (allowLiteral && this.isLiteral(entityString)) {\n            const value    = this.getLiteralValue(entityString);\n            const language = this.getLiteralLanguage(entityString);\n            const datatype = this.getLiteralType(entityString);\n            return new Literal(value, {language, datatype});\n        } else {\n            throw new Error(`Could not parse ${entityString}.`);\n        }\n    }\n\n    /**\n     * Transforms the given subject string into an RDFNode.\n     *\n     * @param {String} subjectString\n     * The string representing the subject.\n     *\n     * @return {RDFNode}\n     * The created RDFNode.\n     *\n     * @throw {Error}\n     * If the subject string is invalid. Only named and blank nodes are allowed\n     * as subject.\n     *\n     * @private\n     */\n    parseSubject(subjectString) {\n        try {\n            return this.parseN3Entity(subjectString, {allowLiteral: false});\n        } catch (err) {\n            throw new Error(`${subjectString} is not a valid subject.`);\n        }\n    }\n\n    /**\n     * Transforms the given predicate string into an RDFNode.\n     *\n     * @param {String} predicateString\n     * The string representing the predicate.\n     *\n     * @return {RDFNode}\n     * The created RDFNode.\n     *\n     * @throws {Error}\n     * If the predicate string is invalid. Only named nodes are allowed as\n     * predicate.\n     *\n     * @private\n     */\n    parsePredicate(predicateString) {\n        try {\n            return this.parseN3Entity(predicateString, {allowBlank: false, allowLiteral: false});\n        } catch (err) {\n            throw new Error(`${predicateString} is not a valid predicate.`);\n        }\n    }\n\n    /**\n     * Transforms the given object string into an RDFNode.\n     *\n     * @param {String} objectString\n     * The string representing the object.\n     *\n     * @return {RDFNode}\n     * The created RDFNode.\n     *\n     * @throws {Error}\n     * If the object string is invalid.\n     *\n     * @private\n     */\n    parseObject(objectString) {\n        try {\n            return this.parseN3Entity(objectString);\n        } catch (err) {\n            throw new Error(`${objectString} is not a valid object.`);\n        }\n    }\n\n    /**\n     * Transform an N3 triple object into a triple object of our\n     * implementation.\n     *\n     * @param {*} n3Triple\n     * A triple made by the N3 parser.\n     *\n     * @return {Triple}\n     * The corresponding triple.\n     *\n     * @private\n     */\n    parseN3Triple(n3Triple) {\n        const subject   = this.parseSubject(n3Triple.subject);\n        const predicate = this.parsePredicate(n3Triple.predicate);\n        const object    = this.parseObject(n3Triple.object);\n        return new Triple(subject, predicate, object);\n    }\n\n    /**\n     * Parses a Turtle string an returns a graph and a profile.\n     *\n     * @param {String} s\n     * The Turtle string to parse.\n     *\n     * @param {Object} options\n     * The options object.\n     *\n     * @param {Function} [options.filter]\n     * Determines which triple to include in the resulting graph.\n     *\n     * @param {Graph} [options.graph]\n     * The graph to add the triples to.\n     *\n     * @param {Profile} [options.profile]\n     * The profile to add the prefixes and terms to.\n     *\n     * @return {Promise}\n     * A promise that eventually resolves to the resulting graph and profile.\n     * If there is an error, the promise is rejected.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-DataParser-parse-boolean-any-toparse-ParserCallback-callback-DOMString-base-TripleFilter-filter-Graph-graph\n     */\n    parse(s, { filter = ()=>true, graph = new Graph(), profile = new Profile() } = {}) {\n        return new Promise((resolve, reject) => this.parser.parse(\n            s,\n            (err, n3Triple, prefixes) => {\n                if (err) {\n                    reject(err);\n                }\n                if (n3Triple) {\n                    const triple = this.parseN3Triple(n3Triple);\n                    if (filter(triple)) {\n                        graph.add(triple);\n                    }\n                }\n                if (prefixes) {\n                    resolve({graph, profile});\n                }\n            },\n            (prefix, iri) => {\n                profile.setPrefix(prefix, iri);\n            }\n        ));\n    }\n}"
  },
  {
    "__docId__": 176,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TurtleReader",
    "memberof": "src/TurtleReader.js",
    "longname": "src/TurtleReader.js~TurtleReader",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/TurtleReader.js",
    "importStyle": "TurtleReader",
    "description": "Transforms a Turtle string into a graph and a profile.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#data-parsers"
    ],
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 177,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#constructor",
    "access": null,
    "description": "",
    "lineNumber": 20,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parser",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#parser",
    "access": "private",
    "description": "The N3.js parser.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isIRI",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#isIRI",
    "access": null,
    "description": "Checks if the given string represents an IRI.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "entityString",
        "description": "The entity to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the string represents an IRI."
    },
    "generator": false
  },
  {
    "__docId__": 180,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isLiteral",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#isLiteral",
    "access": null,
    "description": "Checks if the given string represents a literal.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "entityString",
        "description": "The entity to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the string represents a literal."
    },
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isBlank",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#isBlank",
    "access": null,
    "description": "Checks if the given string represents a blank node.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "entityString",
        "description": "The entity to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the string represents a blank node."
    },
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLiteralValue",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#getLiteralValue",
    "access": "private",
    "description": "Returns the value of the literal.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "literalString",
        "description": "The literal to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The value of the literal."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the provided string does not represent a literal."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 183,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLiteralType",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#getLiteralType",
    "access": "private",
    "description": "Returns the datatype of the literal.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "literalString",
        "description": "The literal to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The datatype of the literal."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the provided string does not represent a literal."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLiteralLanguage",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#getLiteralLanguage",
    "access": "private",
    "description": "Returns the language of the literal.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "literalString",
        "description": "The literal to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The language of the literal."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the provided string does not represent a literal."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "parseN3Entity",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#parseN3Entity",
    "access": null,
    "description": "Transforms an N3 entity (subject, predicate, object as a string) into the\ncorresponding RDFNode.",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "entityString",
        "description": "The word to transform."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.allowBlank",
        "description": "Whether blank nodes are allowed."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.allowNamed",
        "description": "Whether named nodes are allowed."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.allowLiteral",
        "description": "Whether literals are allowed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": "The respective RDFNode."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the word is invalid."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 186,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "parseSubject",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#parseSubject",
    "access": "private",
    "description": "Transforms the given subject string into an RDFNode.",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{Error}\nIf the subject string is invalid. Only named and blank nodes are allowed\nas subject."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subjectString",
        "description": "The string representing the subject."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": "The created RDFNode."
    },
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "parsePredicate",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#parsePredicate",
    "access": "private",
    "description": "Transforms the given predicate string into an RDFNode.",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "predicateString",
        "description": "The string representing the predicate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": "The created RDFNode."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the predicate string is invalid. Only named nodes are allowed as\npredicate."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "parseObject",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#parseObject",
    "access": "private",
    "description": "Transforms the given object string into an RDFNode.",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectString",
        "description": "The string representing the object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": "The created RDFNode."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the object string is invalid."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 189,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "parseN3Triple",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#parseN3Triple",
    "access": "private",
    "description": "Transform an N3 triple object into a triple object of our\nimplementation.",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n3Triple",
        "description": "A triple made by the N3 parser."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Triple"
      ],
      "spread": false,
      "description": "The corresponding triple."
    },
    "generator": false
  },
  {
    "__docId__": 190,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "parse",
    "memberof": "src/TurtleReader.js~TurtleReader",
    "longname": "src/TurtleReader.js~TurtleReader#parse",
    "access": null,
    "description": "Parses a Turtle string an returns a graph and a profile.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-DataParser-parse-boolean-any-toparse-ParserCallback-callback-DOMString-base-TripleFilter-filter-Graph-graph"
    ],
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The Turtle string to parse."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.filter",
        "description": "Determines which triple to include in the resulting graph."
      },
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": true,
        "name": "options.graph",
        "description": "The graph to add the triples to."
      },
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": true,
        "name": "options.profile",
        "description": "The profile to add the prefixes and terms to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that eventually resolves to the resulting graph and profile.\nIf there is an error, the promise is rejected."
    },
    "generator": false
  },
  {
    "__docId__": 191,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/TurtleWriter.js",
    "memberof": null,
    "longname": "src/TurtleWriter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Profile from \"./Profile.js\";\n\n/**\n * Transforms a graph into a Turtle string.\n *\n * @see https://www.w3.org/TR/rdf-interfaces/#data-serializers\n */\nexport default class TurtleWriter {\n\n    /**\n     *\n     */\n    constructor() {}\n\n    /**\n     * Serializes the given profile.\n     *\n     * @param {Profile} profile\n     * The profile to serialize.\n     *\n     * @return {String}\n     * The result.\n     *\n     * @private\n     */\n    serializeProfile(profile) {\n        let result = \"\";\n        for (let [prefix, ns] of profile.prefixes) {\n            if (prefix === \"\") {\n                result += `@base <${ns}> .\\n`;\n            } else {\n                result += `@prefix ${prefix}: <${ns}> .\\n`;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Serializes the given graph.\n     *\n     * @param {Graph} graph\n     * The graph to serialize.\n     *\n     * @param {Profile} profile\n     * The profile used to shorten the IRIs of named nodes.\n     *\n     * @return {String}\n     * The result.\n     *\n     * @private\n     */\n    serializeGraph(graph, profile) {\n        let result = \"\";\n\n        for (let subject of graph.subjects()) {\n            const nodeString          = this.serializeNode(profile, subject) + \" \";\n            const predicateListString = this.serializePredicateList(\n                graph,\n                profile,\n                subject,\n                nodeString.length\n            );\n            result += nodeString + predicateListString + \".\\n\";\n        }\n\n        return result;\n    }\n\n    /**\n     * Serializes the predicate list of the given subject.\n     *\n     * @param {Graph} graph\n     * The graph to serialize.\n     *\n     * @param {Profile} profile\n     * The profile used to shorten the IRIs of named nodes.\n     *\n     * @param {RDFNode} subject\n     * The subject to match.\n     *\n     * @param {Number} indentationLevel\n     * How far to indent each line.\n     *\n     * @return {String}\n     * The result.\n     *\n     * @private\n     */\n    serializePredicateList(graph, profile, subject, indentationLevel) {\n        let result = \"\";\n        let first = true;\n\n        for (let predicate of graph.predicates(subject)) {\n            const punctuation      = first ? \"\" : \";\\n\";\n            const indentation      = first ? \"\" : this.indentation(indentationLevel);\n            const nodeString       = this.serializeNode(profile, predicate) + \" \";\n            const objectListString = this.serializeObjectList(\n                graph,\n                profile,\n                subject,\n                predicate,\n                indentationLevel + nodeString.length\n            );\n            result += punctuation + indentation + nodeString + objectListString;\n\n            first = false;\n        }\n\n        return result;\n    }\n\n    /**\n     * Serializes the object list of the given subject and predicate.\n     *\n     * @param {Graph} graph\n     * The graph to serialize.\n     *\n     * @param {Profile} profile\n     * The profile used to shorten the IRIs of named nodes.\n     *\n     * @param {RDFNode} subject\n     * The subject to match.\n     *\n     * @param {RDFNode} predicate\n     * The predicate to match.\n     *\n     * @param {Number} indentationLevel\n     * How far to indent each line.\n     *\n     * @return {String}\n     * The result.\n     *\n     * @private\n     */\n    serializeObjectList(graph, profile, subject, predicate, indentationLevel) {\n        let result = \"\";\n        let first = true;\n\n        for (let object of graph.objects(subject, predicate)) {\n            const punctuation = first ? \"\" : \",\\n\";\n            const indentation = first ? \"\" : this.indentation(indentationLevel);\n            const nodeString  = this.serializeNode(profile, object) + \" \";\n            result += punctuation + indentation + nodeString;\n\n            first = false;\n        }\n\n        return result;\n    }\n\n    /**\n     * Serializes the given RDFNode.\n     *\n     * @param {Profile} profile\n     * The profile used to shorten the IRIs of named nodes.\n     *\n     * @param {RDFNode} node\n     * The node to serialize.\n     *\n     * @return {String}\n     * The result.\n     *\n     * @private\n     */\n    serializeNode(profile, node) {\n        if (node.interfaceName === \"NamedNode\") {\n            let expanded = node.toString();\n            let shrunk   = profile.prefixes.shrink(expanded);\n            if (expanded === shrunk) {\n                return `<${expanded}>`;\n            } else if (shrunk.startsWith(\":\")) {\n                return `<${shrunk.slice(1)}>`;\n            } else {\n                return shrunk;\n            }\n        } else {\n            return node.toNT();\n        }\n    }\n\n    /**\n     * Creates a string with the given number of spaces.\n     *\n     * @param {Number} length\n     * The length of the string.\n     *\n     * @private\n     */\n    indentation(length) {\n        let result = \"\";\n        for (let i = 0; i < length; i++) {\n            result += \" \";\n        }\n        return result;\n    }\n\n    /**\n     * Turns a graph into a Turtle string.\n     *\n     * @param {Graph} graph\n     * The graph to serialize.\n     *\n     * @param {Profile} [profile]\n     * The profile used to shorten the IRIs of named nodes.\n     *\n     * @return {String}\n     * The Turtle string.\n     *\n     * @see https://www.w3.org/TR/rdf-interfaces/#widl-DataSerializer-serialize-any-Graph-graph\n     */\n    serialize(graph, profile = new Profile()) {\n        return this.serializeProfile(profile) + this.serializeGraph(graph, profile);\n    }\n}\n"
  },
  {
    "__docId__": 192,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TurtleWriter",
    "memberof": "src/TurtleWriter.js",
    "longname": "src/TurtleWriter.js~TurtleWriter",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/TurtleWriter.js",
    "importStyle": "TurtleWriter",
    "description": "Transforms a graph into a Turtle string.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#data-serializers"
    ],
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 193,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/TurtleWriter.js~TurtleWriter",
    "longname": "src/TurtleWriter.js~TurtleWriter#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "serializeProfile",
    "memberof": "src/TurtleWriter.js~TurtleWriter",
    "longname": "src/TurtleWriter.js~TurtleWriter#serializeProfile",
    "access": "private",
    "description": "Serializes the given profile.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": false,
        "name": "profile",
        "description": "The profile to serialize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The result."
    },
    "generator": false
  },
  {
    "__docId__": 195,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "serializeGraph",
    "memberof": "src/TurtleWriter.js~TurtleWriter",
    "longname": "src/TurtleWriter.js~TurtleWriter#serializeGraph",
    "access": "private",
    "description": "Serializes the given graph.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to serialize."
      },
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": false,
        "name": "profile",
        "description": "The profile used to shorten the IRIs of named nodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The result."
    },
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "serializePredicateList",
    "memberof": "src/TurtleWriter.js~TurtleWriter",
    "longname": "src/TurtleWriter.js~TurtleWriter#serializePredicateList",
    "access": "private",
    "description": "Serializes the predicate list of the given subject.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to serialize."
      },
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": false,
        "name": "profile",
        "description": "The profile used to shorten the IRIs of named nodes."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject to match."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "indentationLevel",
        "description": "How far to indent each line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The result."
    },
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "serializeObjectList",
    "memberof": "src/TurtleWriter.js~TurtleWriter",
    "longname": "src/TurtleWriter.js~TurtleWriter#serializeObjectList",
    "access": "private",
    "description": "Serializes the object list of the given subject and predicate.",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to serialize."
      },
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": false,
        "name": "profile",
        "description": "The profile used to shorten the IRIs of named nodes."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject to match."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The predicate to match."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "indentationLevel",
        "description": "How far to indent each line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The result."
    },
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "serializeNode",
    "memberof": "src/TurtleWriter.js~TurtleWriter",
    "longname": "src/TurtleWriter.js~TurtleWriter#serializeNode",
    "access": "private",
    "description": "Serializes the given RDFNode.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": false,
        "name": "profile",
        "description": "The profile used to shorten the IRIs of named nodes."
      },
      {
        "nullable": null,
        "types": [
          "RDFNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to serialize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The result."
    },
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "indentation",
    "memberof": "src/TurtleWriter.js~TurtleWriter",
    "longname": "src/TurtleWriter.js~TurtleWriter#indentation",
    "access": "private",
    "description": "Creates a string with the given number of spaces.",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The length of the string."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 200,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "serialize",
    "memberof": "src/TurtleWriter.js~TurtleWriter",
    "longname": "src/TurtleWriter.js~TurtleWriter#serialize",
    "access": null,
    "description": "Turns a graph into a Turtle string.",
    "see": [
      "https://www.w3.org/TR/rdf-interfaces/#widl-DataSerializer-serialize-any-Graph-graph"
    ],
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to serialize."
      },
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": true,
        "name": "profile",
        "description": "The profile used to shorten the IRIs of named nodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The Turtle string."
    },
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export RDFEnvironment   from \"./RDFEnvironment.js\";\nexport Graph            from \"./Graph.js\";\nexport Triple           from \"./Triple.js\";\n//export RDFNode          from \"./RDFNode.js\";\nexport BlankNode        from \"./BlankNode.js\";\nexport Literal          from \"./Literal.js\";\nexport NamedNode        from \"./NamedNode.js\";\nexport Profile          from \"./Profile.js\";\nexport PrefixMap        from \"./PrefixMap.js\";\nexport TermMap          from \"./TermMap.js\";\nexport {xmlSchemaTypes} from \"./xmlSchemaTypes.js\";\nexport TurtleReader     from \"./TurtleReader.js\";\nexport TurtleWriter     from \"./TurtleWriter.js\";\n\n\n// TODO: remove this once circular dependenciesare resolved correctly.\n\nimport RDFNode          from \"./RDFNode.js\";\nimport BlankNode        from \"./BlankNode.js\";\nimport Literal          from \"./Literal.js\";\nimport NamedNode        from \"./NamedNode.js\";\n\n/**\n * Creates an appropriate RDFNode for an N-Triples string.\n *\n * @param {String} ntString\n * The N-Triples string to parse.\n *\n * @return {RDFNode}\n * The created RDFNode.\n *\n * @throws\n * If the string cannot be parsed.\n */\nRDFNode.fromNT = function (ntString) {\n    if (BlankNode.isNTBlankNode(ntString)) {\n        return BlankNode.fromNT(ntString);\n    } else if (Literal.isNTLiteral(ntString)) {\n        return Literal.fromNT(ntString);\n    } else if (NamedNode.isNTNamedNode(ntString)) {\n        return NamedNode.fromNT(ntString);\n    } else {\n        throw new Error(`Could not parse ${ntString}.`);\n    }\n};\n\nexport {RDFNode};\n"
  },
  {
    "__docId__": 202,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "fromNT",
    "memberof": "src/index.js",
    "longname": "src/index.js~fromNT",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/index.js",
    "importStyle": null,
    "description": "Creates an appropriate RDFNode for an N-Triples string.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ntString",
        "description": "The N-Triples string to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RDFNode"
      ],
      "spread": false,
      "description": "The created RDFNode."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "If the string cannot be parsed."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/n3/n3Lexer.js",
    "memberof": null,
    "longname": "src/n3/n3Lexer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// **N3Lexer** tokenizes N3 documents.\nvar fromCharCode = String.fromCharCode;\nvar immediately = typeof setImmediate === 'function' ? setImmediate :\n                  function setImmediate(func) { setTimeout(func, 0); };\n\n// Regular expression and replacement string to escape N3 strings.\n// Note how we catch invalid unicode sequences separately (they will trigger an error).\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = { '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n                           'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n                           '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n                           '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n                           '/': '/', '?': '?', '#': '#', '@': '@', '%': '%' };\nvar illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\n// ## Constructor\nfunction N3Lexer(options) {\n  if (!(this instanceof N3Lexer))\n    return new N3Lexer(options);\n\n  // In line mode (N-Triples or N-Quads), only simple features may be parsed\n  if (options && options.lineMode) {\n    // Don't tokenize special literals\n    this._tripleQuotedString = this._number = this._boolean = /$0^/;\n    // Swap the tokenize method for a restricted version\n    var self = this;\n    this._tokenize = this.tokenize;\n    this.tokenize = function (input, callback) {\n      this._tokenize(input, function (error, token) {\n        if (!error && /^(?:IRI|prefixed|literal|langcode|type|\\.|eof)$/.test(token.type))\n          callback && callback(error, token);\n        else\n          callback && callback(error || self._syntaxError(token.type, callback = null));\n      });\n    };\n  }\n}\n\nN3Lexer.prototype = {\n  // ## Regular expressions\n  // It's slightly faster to have these as properties than as in-scope variables.\n\n  _iri: /^<((?:[^>\\\\]|\\\\[uU])+)>/, // IRI with escape sequences; needs sanity check after unescaping\n  _unescapedIri: /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>/, // IRI without escape sequences; no unescaping\n  _unescapedString: /^\"[^\"\\\\]+\"(?=[^\"\\\\])/, // non-empty string without escape sequences\n  _singleQuotedString: /^\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"(?=[^\"\\\\])|^'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'(?=[^'\\\\])/,\n  _tripleQuotedString: /^\"\"(\"[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\")\"\"|^''('[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*')''/,\n  _langcode: /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i,\n  _prefix: /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/,\n  _prefixed: /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?=\\.?[,;\\s#()\\[\\]\\{\\}\"'<])/,\n  _blank: /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<])/,\n  _number: /^[\\-+]?(?:\\d+\\.?\\d*([eE](?:[\\-\\+])?\\d+)|\\d*\\.?\\d+)(?=[.,;:\\s#()\\[\\]\\{\\}\"'<])/,\n  _boolean: /^(?:true|false)(?=[.,;:\\s#()\\[\\]\\{\\}\"'<])/,\n  _keyword: /^@[a-z]+(?=[\\s#<:])/,\n  _sparqlKeyword: /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<:])/i,\n  _shortPredicates: /^a(?=\\s+|<)/,\n  _newline: /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/,\n  _whitespace: /^[ \\t]+/,\n  _endOfFile: /^(?:#[^\\n\\r]*)?$/,\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback.\n  _tokenizeToEnd: function (callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually.\n    var input = this._input;\n    while (true) {\n      // Count and skip whitespace lines.\n      var whiteSpaceMatch;\n      while (whiteSpaceMatch = this._newline.exec(input))\n        input = input.substr(whiteSpaceMatch[0].length, input.length), this._line++;\n      // Skip whitespace on current line.\n      if (whiteSpaceMatch = this._whitespace.exec(input))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end.\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF.\n        if (inputFinished)\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character.\n      var line = this._line, type = '', value = '', prefix = '',\n          firstChar = input[0], match = null, matchLength = 0, unescaped, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // Try to match a type.\n        if (input.length === 1) break;\n        else if (input[1] !== '^') return reportSyntaxError(this);\n        this._prevTokenType = '^';\n        // Move to type IRI or prefixed name.\n        input = input.substr(2);\n        if (input[0] !== '<') {\n          inconclusive = true;\n          break;\n        }\n        // Fall through in case the type is an IRI.\n\n      case '<':\n        // Try to find a full IRI without escape sequences.\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences.\n        else if (match = this._iri.exec(input)) {\n          unescaped = this._unescape(match[1]);\n          if (unescaped === null || illegalIriChars.test(unescaped))\n            return reportSyntaxError(this);\n          type = 'IRI', value = unescaped;\n        }\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(input + ' ')))\n          type = 'prefixed', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n      case \"'\":\n        // Try to find a non-empty double-quoted literal without escape sequences.\n        if (match = this._unescapedString.exec(input))\n          type = 'literal', value = match[0];\n        // Try to find any other literal wrapped in a pair of single or double quotes.\n        else if (match = this._singleQuotedString.exec(input)) {\n          unescaped = this._unescape(match[0]);\n          if (unescaped === null)\n            return reportSyntaxError(this);\n          type = 'literal', value = unescaped.replace(/^'|'$/g, '\"');\n        }\n        // Try to find a literal wrapped in three pairs of single or double quotes.\n        else if (match = this._tripleQuotedString.exec(input)) {\n          unescaped = match[1] || match[2];\n          // Count the newlines and advance line counter.\n          this._line += unescaped.split(/\\r\\n|\\r|\\n/).length - 1;\n          unescaped = this._unescape(unescaped);\n          if (unescaped === null)\n            return reportSyntaxError(this);\n          type = 'literal', value = unescaped.replace(/^'|'$/g, '\"');\n        }\n        break;\n\n      case '@':\n        // Try to find a language code.\n        if (this._prevTokenType === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword.\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation.\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot).\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number.\n        if (match = this._number.exec(input)) {\n          type = 'literal';\n          value = '\"' + match[0] + '\"^^http://www.w3.org/2001/XMLSchema#' +\n                  (match[1] ? 'double' : (/^[+\\-]?\\d+$/.test(match[0]) ? 'integer' : 'decimal'));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword.\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean.\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = '\"' + match[0] + '\"^^http://www.w3.org/2001/XMLSchema#boolean';\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate.\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';\n        else\n          inconclusive = true;\n        break;\n\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        // The next token is punctuation\n        matchLength = 1;\n        type = firstChar;\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more.\n      if (inconclusive) {\n        // Try to find a prefix.\n        if ((this._prevTokenType === '@prefix' || this._prevTokenType === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(input + ' ')))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read.\n      if (this._prevTokenType === '^')\n        type = (type === 'IRI' || type === 'prefixed') ? 'type' : '';\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token.\n      callback(null, { line: line, type: type, value: value, prefix: prefix });\n      this._prevTokenType = type;\n\n      // Advance to next part to tokenize.\n      input = input.substr(matchLength || match[0].length, input.length);\n    }\n\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  },\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters.\n  _unescape: function (item) {\n    try {\n      return item.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {\n        var charCode;\n        if (unicode4) {\n          charCode = parseInt(unicode4, 16);\n          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n          return fromCharCode(charCode);\n        }\n        else if (unicode8) {\n          charCode = parseInt(unicode8, 16);\n          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n          if (charCode <= 0xFFFF) return fromCharCode(charCode);\n          return fromCharCode(0xD800 + ((charCode -= 0x10000) / 0x400), 0xDC00 + (charCode & 0x3FF));\n        }\n        else {\n          var replacement = escapeReplacements[escapedChar];\n          if (!replacement)\n            throw new Error();\n          return replacement;\n        }\n      });\n    }\n    catch (error) { return null; }\n  },\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError: function (issue) {\n    this._input = null;\n    return new Error('Syntax error: unexpected \"' + issue + '\" on line ' + this._line + '.');\n  },\n\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize: function (input, callback) {\n    var self = this;\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end.\n    if (typeof input === 'string') {\n      this._input = input;\n      immediately(function () { self._tokenizeToEnd(callback, true); });\n    }\n    // Otherwise, the input will be streamed.\n    else {\n      this._input = '';\n\n      // If no input was given, it will be streamed through `addChunk` and ended with `end`\n      if (!input || typeof input === 'function') {\n        this.addChunk = addChunk;\n        this.end = end;\n        if (!callback)\n          callback = input;\n      }\n      // Otherwise, the input itself must be a stream\n      else {\n        if (typeof input.setEncoding === 'function')\n          input.setEncoding('utf8');\n        input.on('data', addChunk);\n        input.on('end', end);\n      }\n    }\n\n    // Adds the data chunk to the buffer and parses as far as possible\n    function addChunk(data) {\n      if (self._input !== null) {\n        self._input += data;\n        self._tokenizeToEnd(callback, false);\n      }\n    }\n\n    // Parses until the end\n    function end() {\n      if (self._input !== null)\n        self._tokenizeToEnd(callback, true);\n    }\n  },\n};\n\n// ## Exports\n\n// Export the `N3Lexer` class as a whole.\nexport default N3Lexer;\n"
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fromCharCode",
    "memberof": "src/n3/n3Lexer.js",
    "longname": "src/n3/n3Lexer.js~fromCharCode",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Lexer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "immediately",
    "memberof": "src/n3/n3Lexer.js",
    "longname": "src/n3/n3Lexer.js~immediately",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Lexer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "escapeSequence",
    "memberof": "src/n3/n3Lexer.js",
    "longname": "src/n3/n3Lexer.js~escapeSequence",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Lexer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "escapeReplacements",
    "memberof": "src/n3/n3Lexer.js",
    "longname": "src/n3/n3Lexer.js~escapeReplacements",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Lexer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "illegalIriChars",
    "memberof": "src/n3/n3Lexer.js",
    "longname": "src/n3/n3Lexer.js~illegalIriChars",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Lexer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "N3Lexer",
    "memberof": "src/n3/n3Lexer.js",
    "longname": "src/n3/n3Lexer.js~N3Lexer",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/n3/n3Lexer.js",
    "importStyle": "N3Lexer",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 210,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/n3/n3Parser.js",
    "memberof": null,
    "longname": "src/n3/n3Parser.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// **N3Parser** parses N3 documents.\nimport N3Lexer from \"./n3Lexer.js\";\n\nvar RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    RDF_NIL    = RDF_PREFIX + 'nil',\n    RDF_FIRST  = RDF_PREFIX + 'first',\n    RDF_REST   = RDF_PREFIX + 'rest';\n\nvar absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,\n    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i,\n    dotSegments = /(?:^|\\/)\\.\\.?(?:$|[\\/#?])/;\n\n// The next ID for new blank nodes\nvar blankNodePrefix = 0, blankNodeCount = 0; // TODO: remove blank node prefix\n\n// ## Constructor\nfunction N3Parser(options) {\n  if (!(this instanceof N3Parser))\n    return new N3Parser(options);\n  this._tripleStack = [];\n  this._graph = null;\n\n  // Set the document IRI.\n  options = options || {};\n  this._setBase(options.documentIRI);\n\n  // Set supported features depending on the format.\n  var format = (typeof options.format === 'string') && options.format.match(/\\w*$/)[0].toLowerCase(),\n      isTurtle = format === 'turtle', isTriG = format === 'trig',\n      isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n      isLineMode = isNTriples || isNQuads;\n  if (!(this._supportsNamedGraphs = !isTurtle))\n    this._readPredicateOrNamedGraph = this._readPredicate;\n  this._supportsQuads = !(isTurtle || isTriG || isNTriples);\n  // Disable relative IRIs in N-Triples or N-Quads mode\n  if (isLineMode) {\n    this._base = '';\n    this._resolveIRI = function (token) {\n      this._error('Disallowed relative IRI', token);\n      return this._callback = noop, this._subject = null;\n    };\n  }\n  this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                            '_:' + options.blankNodePrefix.replace(/^_:/, '');\n  this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode });\n}\n\n// ## Private class methods\n\n// ### `_resetBlankNodeIds` restarts blank node identification.\nN3Parser._resetBlankNodeIds = function () {\n  blankNodePrefix = blankNodeCount = 0;\n};\n\nN3Parser.prototype = {\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs.\n  _setBase: function (baseIRI) {\n    if (!baseIRI)\n      baseIRI = null;\n    else if (baseIRI.indexOf('#') >= 0)\n      throw new Error('Invalid base IRI ' + baseIRI);\n    // Set base IRI and its components\n    if (this._base = baseIRI) {\n      this._basePath   = baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(schemeAuthority);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  },\n\n  // ### `_readInTopContext` reads a token when in the top context.\n  _readInTopContext: function (token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done.\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration.\n    case '@prefix':\n      this._sparqlStyle = false;\n      return this._readPrefix;\n    case 'PREFIX':\n      this._sparqlStyle = true;\n      return this._readPrefix;\n    // It could be a base declaration.\n    case '@base':\n      this._sparqlStyle = false;\n      return this._readBaseIRI;\n    case 'BASE':\n      this._sparqlStyle = true;\n      return this._readBaseIRI;\n    // It could be a graph.\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject.\n    default:\n      return this._readSubject(token);\n    }\n  },\n\n  // ### `_readSubject` reads a triple's subject.\n  _readSubject: function (token) {\n    this._predicate = null;\n    switch (token.type) {\n    case 'IRI':\n      if (this._base === null || absoluteIRI.test(token.value))\n        this._subject = token.value;\n      else\n        this._subject = this._resolveIRI(token);\n      break;\n    case 'prefixed':\n      var prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error('Undefined prefix \"' + token.prefix + ':\"', token);\n      this._subject = prefix + token.value;\n      break;\n    case '[':\n      // Start a new triple with a new blank node as subject.\n      this._subject = '_:b' + blankNodeCount++;\n      this._tripleStack.push({ subject: this._subject, predicate: null, object: null, type: 'blank' });\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._tripleStack.push({ subject: RDF_NIL, predicate: null, object: null, type: 'list' });\n      this._subject = null;\n      return this._readListItem;\n    case '}':\n      return this._readPunctuation(token);\n    default:\n      return this._error('Expected subject but got ' + token.type, token);\n    }\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph.\n    return this._readPredicateOrNamedGraph;\n  },\n\n  // ### `_readPredicate` reads a triple's predicate.\n  _readPredicate: function (token) {\n    var type = token.type;\n    switch (type) {\n    case 'IRI':\n    case 'abbreviation':\n      if (this._base === null || absoluteIRI.test(token.value))\n        this._predicate = token.value;\n      else\n        this._predicate = this._resolveIRI(token);\n      break;\n    case 'prefixed':\n      if (token.prefix === '_')\n        return this._error('Disallowed blank node as predicate', token);\n      var prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error('Undefined prefix \"' + token.prefix + ':\"', token);\n      this._predicate = prefix + token.value;\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon.\n      if (this._predicate === null)\n        return this._error('Unexpected ' + type, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Extra semicolons can be safely ignored\n      return this._readPredicate;\n    default:\n      return this._error('Expected predicate to follow \"' + this._subject + '\"', token);\n    }\n    // The next token must be an object.\n    return this._readObject;\n  },\n\n  // ### `_readObject` reads a triple's object.\n  _readObject: function (token) {\n    switch (token.type) {\n    case 'IRI':\n      if (this._base === null || absoluteIRI.test(token.value))\n        this._object = token.value;\n      else\n        this._object = this._resolveIRI(token);\n      break;\n    case 'prefixed':\n      var prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error('Undefined prefix \"' + token.prefix + ':\"', token);\n      this._object = prefix + token.value;\n      break;\n    case 'literal':\n      this._object = token.value;\n      return this._readDataTypeOrLang;\n    case '[':\n      // Start a new triple with a new blank node as subject.\n      var blank = '_:b' + blankNodeCount++;\n      this._tripleStack.push({ subject: this._subject, predicate: this._predicate, object: blank, type: 'blank' });\n      this._subject = blank;\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._tripleStack.push({ subject: this._subject, predicate: this._predicate, object: RDF_NIL, type: 'list' });\n      this._subject = null;\n      return this._readListItem;\n    default:\n      return this._error('Expected object to follow \"' + this._predicate + '\"', token);\n    }\n    return this._getTripleEndReader();\n  },\n\n  // ### `_readPredicateOrNamedGraph` reads a triple's predicate, or a named graph.\n  _readPredicateOrNamedGraph: function (token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  },\n\n  // ### `_readGraph` reads a graph.\n  _readGraph: function (token) {\n    if (token.type !== '{')\n      return this._error('Expected graph but got ' + token.type, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  },\n\n  // ### `_readBlankNodeHead` reads the head of a blank node.\n  _readBlankNodeHead: function (token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  },\n\n  // ### `_readBlankNodeTail` reads the end of a blank node.\n  _readBlankNodeTail: function (token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node triple.\n    if (this._subject !== null)\n      this._callback(null, { subject:   this._subject,\n                             predicate: this._predicate,\n                             object:    this._object,\n                             graph:     this._graph || '' });\n\n    // Restore parent triple that contains the blank node.\n    var triple = this._tripleStack.pop();\n    this._subject = triple.subject;\n    // Was the blank node the object?\n    if (triple.object !== null) {\n      // Restore predicate and object as well, and continue by reading punctuation.\n      this._predicate = triple.predicate;\n      this._object = triple.object;\n      return this._getTripleEndReader();\n    }\n    // The blank node was the subject, so continue reading the predicate.\n    // If the blank node didn't contain any predicates, it could also be the label of a named graph.\n    return this._predicate !== null ? this._readPredicate : this._readPredicateOrNamedGraph;\n  },\n\n  // ### `_readDataTypeOrLang` reads an _optional_ data type or language.\n  _readDataTypeOrLang: function (token) {\n    switch (token.type) {\n    case 'type':\n      var value;\n      if (token.prefix === '') {\n        if (this._base === null || absoluteIRI.test(token.value))\n          value = token.value;\n        else\n          value = this._resolveIRI(token);\n      }\n      else {\n        var prefix = this._prefixes[token.prefix];\n        if (prefix === undefined)\n          return this._error('Undefined prefix \"' + token.prefix + ':\"', token);\n        value = prefix + token.value;\n      }\n      this._object += '^^' + value;\n      return this._getTripleEndReader();\n    case 'langcode':\n      this._object += '@' + token.value.toLowerCase();\n      return this._getTripleEndReader();\n    default:\n      return this._getTripleEndReader().call(this, token);\n    }\n  },\n\n  // ### `_readListItem` reads items from a list.\n  _readListItem: function (token) {\n    var item = null,                  // The actual list item.\n        itemHead = null,              // The head of the rdf:first predicate.\n        prevItemHead = this._subject, // The head of the previous rdf:first predicate.\n        stack = this._tripleStack,    // The stack of triples part of recursion (lists, blanks, etc.).\n        parentTriple = stack[stack.length - 1], // The triple containing the current list.\n        next = this._readListItem;    // The next function to execute.\n\n    switch (token.type) {\n    case 'IRI':\n      if (this._base === null || absoluteIRI.test(token.value))\n        item = token.value;\n      else\n        item = this._resolveIRI(token);\n      break;\n    case 'prefixed':\n      var prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error('Undefined prefix \"' + token.prefix + ':\"', token);\n      item = prefix + token.value;\n      break;\n    case 'literal':\n      item = token.value;\n      next = this._readDataTypeOrLang;\n      break;\n    case '[':\n      // Stack the current list triple and start a new triple with a blank node as subject.\n      itemHead = '_:b' + blankNodeCount++;\n      item     = '_:b' + blankNodeCount++;\n      stack.push({ subject: itemHead, predicate: RDF_FIRST, object: item, type: 'blank' });\n      this._subject = item;\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list triple and start a new list\n      itemHead = '_:b' + blankNodeCount++;\n      stack.push({ subject: itemHead, predicate: RDF_FIRST, object: RDF_NIL, type: 'list' });\n      this._subject = null;\n      next = this._readListItem;\n      break;\n    case ')':\n      // Restore the parent triple.\n      stack.pop();\n      // If this list is contained within a parent list, return the membership triple here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._callback(null, { subject:   parentTriple.subject,\n                               predicate: parentTriple.predicate,\n                               object:    parentTriple.object,\n                               graph:     this._graph || '' });\n      // Restore the parent triple's subject.\n      this._subject = parentTriple.subject;\n      // Was this list in the parent triple's subject?\n      if (parentTriple.predicate === null) {\n        // The next token is the predicate.\n        next = this._readPredicate;\n        // Skip writing the list tail if this was an empty list.\n        if (parentTriple.subject === RDF_NIL)\n          return next;\n      }\n      // The list was in the parent triple's object.\n      else {\n        // Restore the parent triple's predicate and object as well.\n        this._predicate = parentTriple.predicate;\n        this._object = parentTriple.object;\n        next = this._getTripleEndReader();\n        // Skip writing the list tail if this was an empty list.\n        if (parentTriple.object === RDF_NIL)\n          return next;\n      }\n      // Close the list by making the item head nil.\n      itemHead = RDF_NIL;\n      break;\n    default:\n      return this._error('Expected list item instead of \"' + token.type + '\"', token);\n    }\n\n     // Create a new blank node if no item head was assigned yet.\n    if (itemHead === null)\n      this._subject = itemHead = '_:b' + blankNodeCount++;\n\n    // Is this the first element of the list?\n    if (prevItemHead === null) {\n      // This list is either the object or the subject.\n      if (parentTriple.object === RDF_NIL)\n        parentTriple.object = itemHead;\n      else\n        parentTriple.subject = itemHead;\n    }\n    else {\n      // The rest of the list is in the current head.\n      this._callback(null, { subject:   prevItemHead,\n                             predicate: RDF_REST,\n                             object:    itemHead,\n                             graph:     this._graph || '' });\n    }\n    // Add the item's value.\n    if (item !== null)\n      this._callback(null, { subject:   itemHead,\n                             predicate: RDF_FIRST,\n                             object:    item,\n                             graph:     this._graph || '' });\n    return next;\n  },\n\n  // ### `_readPunctuation` reads punctuation between triples or triple parts.\n  _readPunctuation: function (token) {\n    var next, subject = this._subject, graph = this._graph;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next.\n    case '.':\n      this._subject = null;\n      next = this._readInTopContext;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different.\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different.\n    case ',':\n      next = this._readObject;\n      break;\n    // An IRI means this is a quad (only allowed if not already inside a graph).\n    case 'IRI':\n      if (this._supportsQuads && this._graph === null) {\n        if (this._base === null || absoluteIRI.test(token.value))\n          graph = token.value;\n        else\n          graph = this._resolveIRI(token);\n        subject = this._subject;\n        next = this._readQuadPunctuation;\n        break;\n      }\n    // An prefixed name means this is a quad (only allowed if not already inside a graph).\n    case 'prefixed':\n      if (this._supportsQuads && this._graph === null) {\n        var prefix = this._prefixes[token.prefix];\n        if (prefix === undefined)\n          return this._error('Undefined prefix \"' + token.prefix + ':\"', token);\n        graph = prefix + token.value;\n        next = this._readQuadPunctuation;\n        break;\n      }\n    default:\n      return this._error('Expected punctuation to follow \"' + this._object + '\"', token);\n    }\n    // A triple has been completed now, so return it.\n    if (subject !== null)\n      this._callback(null, { subject:   subject,\n                             predicate: this._predicate,\n                             object:    this._object,\n                             graph:     graph || '' });\n    return next;\n  },\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation: function (token) {\n    var next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different.\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different.\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error('Expected punctuation to follow \"' + this._object + '\"', token);\n    }\n    // A triple has been completed now, so return it.\n    this._callback(null, { subject:   this._subject,\n                           predicate: this._predicate,\n                           object:    this._object,\n                           graph:     this._graph || '' });\n    return next;\n  },\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad.\n  _readQuadPunctuation: function (token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  },\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration.\n  _readPrefix: function (token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  },\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration.\n  _readPrefixIRI: function (token) {\n    if (token.type !== 'IRI')\n      return this._error('Expected IRI to follow prefix \"' + this._prefix + ':\"', token);\n    var prefixIRI;\n    if (this._base === null || absoluteIRI.test(token.value))\n      prefixIRI = token.value;\n    else\n      prefixIRI = this._resolveIRI(token);\n    this._prefixes[this._prefix] = prefixIRI;\n    this._prefixCallback(this._prefix, prefixIRI);\n    return this._readDeclarationPunctuation;\n  },\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration.\n  _readBaseIRI: function (token) {\n    if (token.type !== 'IRI')\n      return this._error('Expected IRI to follow base declaration', token);\n    try {\n      this._setBase(this._base === null ||\n                    absoluteIRI.test(token.value) ? token.value : this._resolveIRI(token));\n\n      // BEGIN CHANGE\n      this._prefixes[\"\"] = token.value;\n      this._prefixCallback(\"\", token.value);\n      // END CHANGE\n    }\n    catch (error) { this._error(error.message, token); }\n    return this._readDeclarationPunctuation;\n  },\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph.\n  _readNamedGraphLabel: function (token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  },\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph.\n  _readNamedGraphBlankLabel: function (token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = '_:b' + blankNodeCount++;\n    return this._readGraph;\n  },\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration.\n  _readDeclarationPunctuation: function (token) {\n    // SPARQL-style declarations don't have punctuation.\n    if (this._sparqlStyle)\n      return this._readInTopContext(token);\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  },\n\n  // ### `_getTripleEndReader` gets the next reader function at the end of a triple.\n  _getTripleEndReader: function () {\n    var stack = this._tripleStack;\n    if (stack.length === 0)\n      return this._readPunctuation;\n\n    switch (stack[stack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    }\n  },\n\n  // ### `_error` emits an error message through the callback.\n  _error: function (message, token) {\n    this._callback(new Error(message + ' at line ' + token.line + '.'));\n  },\n\n  // ### `_resolveIRI` resolves a relative IRI token against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative.\n  _resolveIRI: function (token) {\n    var iri = token.value;\n    switch (iri[0]) {\n    // An empty relative IRI indicates the base IRI\n    case undefined: return this._base;\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      return this._removeDotSegments(this._basePath + iri);\n    }\n  },\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.\n  _removeDotSegments: function (iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!dotSegments.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return result + '/' + iri.substr(i + 1);\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  },\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed triple through the callback.\n  parse: function (input, tripleCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix || '_:b' + blankNodePrefix++ + '_';\n\n    // If the input argument is not given, shift parameters\n    if (typeof input === 'function')\n      prefixCallback = tripleCallback, tripleCallback = input, input = null;\n\n    // Set the triple and prefix callbacks.\n    this._callback = tripleCallback || noop;\n    this._prefixCallback = prefixCallback || noop;\n\n    // Execute the read callback when a token arrives.\n    var self = this;\n    this._lexer.tokenize(input, function (error, token) {\n      if (error !== null)\n        self._callback(error), self._callback = noop;\n      else if (self._readCallback !== undefined)\n        self._readCallback = self._readCallback(token);\n    });\n\n    // If no input was given, it can be added with `addChunk` and ended with `end`\n    if (!input) {\n      this.addChunk = this._lexer.addChunk;\n      this.end = this._lexer.end;\n    }\n  },\n};\n\n// The empty function\nfunction noop() {}\n\n// ## Exports\n\n// Export the `N3Parser` class as a whole.\nexport default N3Parser;\n"
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RDF_PREFIX",
    "memberof": "src/n3/n3Parser.js",
    "longname": "src/n3/n3Parser.js~RDF_PREFIX",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "absoluteIRI",
    "memberof": "src/n3/n3Parser.js",
    "longname": "src/n3/n3Parser.js~absoluteIRI",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "blankNodePrefix",
    "memberof": "src/n3/n3Parser.js",
    "longname": "src/n3/n3Parser.js~blankNodePrefix",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_resetBlankNodeIds",
    "memberof": "src/n3/n3Parser.js",
    "longname": "src/n3/n3Parser.js~_resetBlankNodeIds",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 215,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "noop",
    "memberof": "src/n3/n3Parser.js",
    "longname": "src/n3/n3Parser.js~noop",
    "access": null,
    "export": false,
    "importPath": "@ignavia/rdf/src/n3/n3Parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 700,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "N3Parser",
    "memberof": "src/n3/n3Parser.js",
    "longname": "src/n3/n3Parser.js~N3Parser",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/n3/n3Parser.js",
    "importStyle": "N3Parser",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 217,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/xmlSchemaTypes.js",
    "memberof": null,
    "longname": "src/xmlSchemaTypes.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/**\n * A collection of some basic XMLSchema types.\n */\nexport const xmlSchemaTypes = {\n    string:             \"http://www.w3.org/2001/XMLSchema#string\",\n    boolean:            \"http://www.w3.org/2001/XMLSchema#boolean\",\n    dateTime:           \"http://www.w3.org/2001/XMLSchema#dateTime\",\n    date:               \"http://www.w3.org/2001/XMLSchema#date\",\n    time:               \"http://www.w3.org/2001/XMLSchema#time\",\n    double:             \"http://www.w3.org/2001/XMLSchema#double\",\n    float:              \"http://www.w3.org/2001/XMLSchema#float\",\n    decimal:            \"http://www.w3.org/2001/XMLSchema#decimal\",\n    positiveInteger:    \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n    nonNegativeInteger: \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\",\n    integer:            \"http://www.w3.org/2001/XMLSchema#integer\",\n    nonPositiveInteger: \"http://www.w3.org/2001/XMLSchema#nonPositiveInteger\",\n    negativeInteger:    \"http://www.w3.org/2001/XMLSchema#negativeInteger\",\n    long:               \"http://www.w3.org/2001/XMLSchema#long\",\n    int:                \"http://www.w3.org/2001/XMLSchema#int\",\n    short:              \"http://www.w3.org/2001/XMLSchema#short\",\n    byte:               \"http://www.w3.org/2001/XMLSchema#byte\",\n    unsignedLong:       \"http://www.w3.org/2001/XMLSchema#unsignedLong\",\n    unsignedInt:        \"http://www.w3.org/2001/XMLSchema#unsignedInt\",\n    unsignedShort:      \"http://www.w3.org/2001/XMLSchema#unsignedShort\",\n    unsignedByte:       \"http://www.w3.org/2001/XMLSchema#unsignedByte\"\n};"
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "xmlSchemaTypes",
    "memberof": "src/xmlSchemaTypes.js",
    "longname": "src/xmlSchemaTypes.js~xmlSchemaTypes",
    "access": null,
    "export": true,
    "importPath": "@ignavia/rdf/src/xmlSchemaTypes.js",
    "importStyle": "{xmlSchemaTypes}",
    "description": "A collection of some basic XMLSchema types.",
    "lineNumber": 4,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 223,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 228,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 239,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 242,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 248,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 250,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]